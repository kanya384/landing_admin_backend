// Code generated by go-swagger; DO NOT EDIT.

package docs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetDocsHandlerFunc turns a function with the right signature into a get docs handler
type GetDocsHandlerFunc func(GetDocsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDocsHandlerFunc) Handle(params GetDocsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetDocsHandler interface for that can handle valid get docs params
type GetDocsHandler interface {
	Handle(GetDocsParams, interface{}) middleware.Responder
}

// NewGetDocs creates a new http.Handler for the get docs operation
func NewGetDocs(ctx *middleware.Context, handler GetDocsHandler) *GetDocs {
	return &GetDocs{Context: ctx, Handler: handler}
}

/* GetDocs swagger:route GET /docs docs getDocs

get docs list

*/
type GetDocs struct {
	Context *middleware.Context
	Handler GetDocsHandler
}

func (o *GetDocs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetDocsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
