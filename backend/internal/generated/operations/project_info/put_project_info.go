// Code generated by go-swagger; DO NOT EDIT.

package project_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutProjectInfoHandlerFunc turns a function with the right signature into a put project info handler
type PutProjectInfoHandlerFunc func(PutProjectInfoParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutProjectInfoHandlerFunc) Handle(params PutProjectInfoParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutProjectInfoHandler interface for that can handle valid put project info params
type PutProjectInfoHandler interface {
	Handle(PutProjectInfoParams, interface{}) middleware.Responder
}

// NewPutProjectInfo creates a new http.Handler for the put project info operation
func NewPutProjectInfo(ctx *middleware.Context, handler PutProjectInfoHandler) *PutProjectInfo {
	return &PutProjectInfo{Context: ctx, Handler: handler}
}

/* PutProjectInfo swagger:route PUT /projectInfo projectInfo putProjectInfo

create pojectInfo

*/
type PutProjectInfo struct {
	Context *middleware.Context
	Handler PutProjectInfoHandler
}

func (o *PutProjectInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutProjectInfoParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
