package posters

// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/posters -i Posters -t https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus -o posters_with_logger.go -l ""

import (
	"context"
	"io"
	"landing_admin_backend/internal/domain"

	"github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// PostersWithLogrus implements Posters that is instrumented with logrus logger
type PostersWithLogrus struct {
	_log  *logrus.Entry
	_base Posters
}

// NewPostersWithLogrus instruments an implementation of the Posters with simple logging
func NewPostersWithLogrus(base Posters, log *logrus.Entry) PostersWithLogrus {
	return PostersWithLogrus{
		_base: base,
		_log:  log,
	}
}

// Create implements Posters
func (_d PostersWithLogrus) Create(ctx context.Context, poster domain.Poster, file io.ReadCloser) (posterRes domain.Poster, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"poster": poster,
		"file":   file})).Debug("PostersWithLogrus: calling Create")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"posterRes": posterRes,
				"err":       err})).Error("PostersWithLogrus: method Create returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"posterRes": posterRes,
				"err":       err})).Debug("PostersWithLogrus: method Create finished")
		}
	}()
	return _d._base.Create(ctx, poster, file)
}

// Delete implements Posters
func (_d PostersWithLogrus) Delete(ctx context.Context, posterID primitive.ObjectID) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":      ctx,
		"posterID": posterID})).Debug("PostersWithLogrus: calling Delete")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("PostersWithLogrus: method Delete returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("PostersWithLogrus: method Delete finished")
		}
	}()
	return _d._base.Delete(ctx, posterID)
}

// Get implements Posters
func (_d PostersWithLogrus) Get(ctx context.Context, filter map[string]interface{}) (posters []*domain.Poster, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"filter": filter})).Debug("PostersWithLogrus: calling Get")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"posters": posters,
				"err":     err})).Error("PostersWithLogrus: method Get returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"posters": posters,
				"err":     err})).Debug("PostersWithLogrus: method Get finished")
		}
	}()
	return _d._base.Get(ctx, filter)
}

// GetByID implements Posters
func (_d PostersWithLogrus) GetByID(ctx context.Context, id primitive.ObjectID) (poster domain.Poster, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx": ctx,
		"id":  id})).Debug("PostersWithLogrus: calling GetByID")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"poster": poster,
				"err":    err})).Error("PostersWithLogrus: method GetByID returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"poster": poster,
				"err":    err})).Debug("PostersWithLogrus: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// PostersOrdersChange implements Posters
func (_d PostersWithLogrus) PostersOrdersChange(ctx context.Context, first domain.UpdateOrder, second domain.UpdateOrder) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"first":  first,
		"second": second})).Debug("PostersWithLogrus: calling PostersOrdersChange")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("PostersWithLogrus: method PostersOrdersChange returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("PostersWithLogrus: method PostersOrdersChange finished")
		}
	}()
	return _d._base.PostersOrdersChange(ctx, first, second)
}

// Update implements Posters
func (_d PostersWithLogrus) Update(ctx context.Context, poster domain.Poster, file interface{}) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"poster": poster,
		"file":   file})).Debug("PostersWithLogrus: calling Update")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("PostersWithLogrus: method Update returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("PostersWithLogrus: method Update finished")
		}
	}()
	return _d._base.Update(ctx, poster, file)
}
