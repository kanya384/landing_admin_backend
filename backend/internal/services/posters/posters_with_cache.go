package posters

// Code generated by gowrap. DO NOT EDIT.
// template: ../../generated/wrappers/cache
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/posters -i Posters -t ../../generated/wrappers/cache -o posters_with_cache.go -l ""

import (
	"context"
	"io"
	"landing_admin_backend/internal/domain"
	"landing_admin_backend/internal/services/memcache"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// PostersWithCache implements Posters that is instrumented with logging
type PostersWithCache struct {
	cache memcache.Cache
	_base Posters
}

// NewPostersWithCache instruments an implementation of the Posters with simple logging
func NewPostersWithCache(base Posters, cache memcache.Cache) PostersWithCache {
	return PostersWithCache{
		_base: base,
		cache: cache,
	}
}

// Create implements Posters
func (_d PostersWithCache) Create(ctx context.Context, poster domain.Poster, file io.ReadCloser) (posterRes domain.Poster, err error) {
	defer _d.cache.Delete("Posters")

	return _d._base.Create(ctx, poster, file)
}

// Delete implements Posters
func (_d PostersWithCache) Delete(ctx context.Context, posterID primitive.ObjectID) (err error) {
	defer _d.cache.Delete("Posters")

	return _d._base.Delete(ctx, posterID)
}

// Get implements Posters
func (_d PostersWithCache) Get(ctx context.Context, filter map[string]interface{}) (posters []*domain.Poster, err error) {
	cached, ok := _d.cache.Get("Posters")
	if ok {

		return cached.Value.([]*domain.Poster), err

	}
	res, err := _d._base.Get(ctx, filter)
	if err != nil {
		return
	}
	_d.cache.Set("Posters", res)
	return res, nil
}

// GetByID implements Posters
func (_d PostersWithCache) GetByID(ctx context.Context, id primitive.ObjectID) (poster domain.Poster, err error) {
	return _d._base.GetByID(ctx, id)
}

// Update implements Posters
func (_d PostersWithCache) Update(ctx context.Context, poster domain.Poster, file interface{}) (posterRes domain.Poster, err error) {
	defer _d.cache.Delete("Posters")

	return _d._base.Update(ctx, poster, file)
}

// UpdateOrder implements Posters
func (_d PostersWithCache) UpdateOrder(ctx context.Context, first domain.UpdateOrder, second domain.UpdateOrder) (err error) {
	defer _d.cache.Delete("Posters")

	return _d._base.UpdateOrder(ctx, first, second)
}
