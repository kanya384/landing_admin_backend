package settings

// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/settings -i Settings -t https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus -o settings_with_logger.go -l ""

import (
	"context"
	"landing_admin_backend/internal/domain"

	"github.com/sirupsen/logrus"
)

// SettingsWithLogrus implements Settings that is instrumented with logrus logger
type SettingsWithLogrus struct {
	_log  *logrus.Entry
	_base Settings
}

// NewSettingsWithLogrus instruments an implementation of the Settings with simple logging
func NewSettingsWithLogrus(base Settings, log *logrus.Entry) SettingsWithLogrus {
	return SettingsWithLogrus{
		_base: base,
		_log:  log,
	}
}

// CreateOrUpdate implements Settings
func (_d SettingsWithLogrus) CreateOrUpdate(ctx context.Context, setting domain.Setting) (settingRes *domain.Setting, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":     ctx,
		"setting": setting})).Debug("SettingsWithLogrus: calling CreateOrUpdate")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"settingRes": settingRes,
				"err":        err})).Error("SettingsWithLogrus: method CreateOrUpdate returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"settingRes": settingRes,
				"err":        err})).Debug("SettingsWithLogrus: method CreateOrUpdate finished")
		}
	}()
	return _d._base.CreateOrUpdate(ctx, setting)
}

// Get implements Settings
func (_d SettingsWithLogrus) Get(ctx context.Context) (settings []*domain.Setting, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx": ctx})).Debug("SettingsWithLogrus: calling Get")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"settings": settings,
				"err":      err})).Error("SettingsWithLogrus: method Get returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"settings": settings,
				"err":      err})).Debug("SettingsWithLogrus: method Get finished")
		}
	}()
	return _d._base.Get(ctx)
}
