package months

// Code generated by gowrap. DO NOT EDIT.
// template: ../../generated/wrappers/cache
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/months -i Months -t ../../generated/wrappers/cache -o months_with_cache.go -l ""

import (
	"context"
	"landing_admin_backend/internal/domain"
	"landing_admin_backend/internal/services/memcache"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// MonthsWithCache implements Months that is instrumented with logging
type MonthsWithCache struct {
	cache memcache.Cache
	_base Months
}

// NewMonthsWithCache instruments an implementation of the Months with simple logging
func NewMonthsWithCache(base Months, cache memcache.Cache) MonthsWithCache {
	return MonthsWithCache{
		_base: base,
		cache: cache,
	}
}

// Create implements Months
func (_d MonthsWithCache) Create(ctx context.Context, month domain.Month) (err error) {
	defer _d.cache.Delete("Months")

	return _d._base.Create(ctx, month)
}

// Delete implements Months
func (_d MonthsWithCache) Delete(ctx context.Context, monthID primitive.ObjectID) (err error) {
	defer _d.cache.Delete("Months")

	return _d._base.Delete(ctx, monthID)
}

// Get implements Months
func (_d MonthsWithCache) Get(ctx context.Context, yearID primitive.ObjectID) (months []domain.Month, err error) {
	cached, ok := _d.cache.Get("Months")
	if ok {

		return cached.Value.([]domain.Month), err

	}
	res, err := _d._base.Get(ctx, yearID)
	if err != nil {
		return
	}
	_d.cache.Set("Months", res)
	return res, err
}

// Update implements Months
func (_d MonthsWithCache) Update(ctx context.Context, month domain.Month) (err error) {
	defer _d.cache.Delete("Months")

	return _d._base.Update(ctx, month)
}
