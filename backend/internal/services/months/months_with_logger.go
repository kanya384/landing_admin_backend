package months

// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/months -i Months -t https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus -o months_with_logger.go -l ""

import (
	"context"
	"landing_admin_backend/internal/domain"

	"github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// MonthsWithLogrus implements Months that is instrumented with logrus logger
type MonthsWithLogrus struct {
	_log  *logrus.Entry
	_base Months
}

// NewMonthsWithLogrus instruments an implementation of the Months with simple logging
func NewMonthsWithLogrus(base Months, log *logrus.Entry) MonthsWithLogrus {
	return MonthsWithLogrus{
		_base: base,
		_log:  log,
	}
}

// Create implements Months
func (_d MonthsWithLogrus) Create(ctx context.Context, month domain.Month) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":   ctx,
		"month": month})).Debug("MonthsWithLogrus: calling Create")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("MonthsWithLogrus: method Create returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("MonthsWithLogrus: method Create finished")
		}
	}()
	return _d._base.Create(ctx, month)
}

// Delete implements Months
func (_d MonthsWithLogrus) Delete(ctx context.Context, monthID primitive.ObjectID) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":     ctx,
		"monthID": monthID})).Debug("MonthsWithLogrus: calling Delete")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("MonthsWithLogrus: method Delete returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("MonthsWithLogrus: method Delete finished")
		}
	}()
	return _d._base.Delete(ctx, monthID)
}

// Get implements Months
func (_d MonthsWithLogrus) Get(ctx context.Context, yearID primitive.ObjectID) (months []domain.Month, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"yearID": yearID})).Debug("MonthsWithLogrus: calling Get")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"months": months,
				"err":    err})).Error("MonthsWithLogrus: method Get returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"months": months,
				"err":    err})).Debug("MonthsWithLogrus: method Get finished")
		}
	}()
	return _d._base.Get(ctx, yearID)
}

// Update implements Months
func (_d MonthsWithLogrus) Update(ctx context.Context, month domain.Month) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":   ctx,
		"month": month})).Debug("MonthsWithLogrus: calling Update")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("MonthsWithLogrus: method Update returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("MonthsWithLogrus: method Update finished")
		}
	}()
	return _d._base.Update(ctx, month)
}
