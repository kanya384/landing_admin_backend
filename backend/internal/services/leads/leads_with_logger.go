package leads

// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/leads -i Leads -t https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus -o leads_with_logger.go -l ""

import (
	"context"
	"landing_admin_backend/internal/domain"

	"github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// LeadsWithLogrus implements Leads that is instrumented with logrus logger
type LeadsWithLogrus struct {
	_log  *logrus.Entry
	_base Leads
}

// NewLeadsWithLogrus instruments an implementation of the Leads with simple logging
func NewLeadsWithLogrus(base Leads, log *logrus.Entry) LeadsWithLogrus {
	return LeadsWithLogrus{
		_base: base,
		_log:  log,
	}
}

// Create implements Leads
func (_d LeadsWithLogrus) Create(ctx context.Context, lead domain.Lead) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":  ctx,
		"lead": lead})).Debug("LeadsWithLogrus: calling Create")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("LeadsWithLogrus: method Create returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("LeadsWithLogrus: method Create finished")
		}
	}()
	return _d._base.Create(ctx, lead)
}

// Delete implements Leads
func (_d LeadsWithLogrus) Delete(ctx context.Context, leadID primitive.ObjectID) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"leadID": leadID})).Debug("LeadsWithLogrus: calling Delete")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("LeadsWithLogrus: method Delete returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("LeadsWithLogrus: method Delete finished")
		}
	}()
	return _d._base.Delete(ctx, leadID)
}

// Get implements Leads
func (_d LeadsWithLogrus) Get(ctx context.Context) (leads []*domain.Lead, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx": ctx})).Debug("LeadsWithLogrus: calling Get")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"leads": leads,
				"err":   err})).Error("LeadsWithLogrus: method Get returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"leads": leads,
				"err":   err})).Debug("LeadsWithLogrus: method Get finished")
		}
	}()
	return _d._base.Get(ctx)
}

// GetAnalytics implements Leads
func (_d LeadsWithLogrus) GetAnalytics(ctx context.Context) (analytics domain.Analytics, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx": ctx})).Debug("LeadsWithLogrus: calling GetAnalytics")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"analytics": analytics,
				"err":       err})).Error("LeadsWithLogrus: method GetAnalytics returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"analytics": analytics,
				"err":       err})).Debug("LeadsWithLogrus: method GetAnalytics finished")
		}
	}()
	return _d._base.GetAnalytics(ctx)
}
