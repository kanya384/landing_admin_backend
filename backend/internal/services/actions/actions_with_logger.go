package actions

// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/actions -i Actions -t https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus -o actions_with_logger.go -l ""

import (
	"context"
	"io"
	"landing_admin_backend/internal/domain"

	"github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// ActionsWithLogrus implements Actions that is instrumented with logrus logger
type ActionsWithLogrus struct {
	_log  *logrus.Entry
	_base Actions
}

// NewActionsWithLogrus instruments an implementation of the Actions with simple logging
func NewActionsWithLogrus(base Actions, log *logrus.Entry) ActionsWithLogrus {
	return ActionsWithLogrus{
		_base: base,
		_log:  log,
	}
}

// Create implements Actions
func (_d ActionsWithLogrus) Create(ctx context.Context, action domain.Action, file io.ReadCloser) (actionRes domain.Action, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"action": action,
		"file":   file})).Debug("ActionsWithLogrus: calling Create")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"actionRes": actionRes,
				"err":       err})).Error("ActionsWithLogrus: method Create returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"actionRes": actionRes,
				"err":       err})).Debug("ActionsWithLogrus: method Create finished")
		}
	}()
	return _d._base.Create(ctx, action, file)
}

// Delete implements Actions
func (_d ActionsWithLogrus) Delete(ctx context.Context, actionID primitive.ObjectID) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":      ctx,
		"actionID": actionID})).Debug("ActionsWithLogrus: calling Delete")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("ActionsWithLogrus: method Delete returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("ActionsWithLogrus: method Delete finished")
		}
	}()
	return _d._base.Delete(ctx, actionID)
}

// Get implements Actions
func (_d ActionsWithLogrus) Get(ctx context.Context, filter map[string]interface{}) (actions []*domain.Action, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"filter": filter})).Debug("ActionsWithLogrus: calling Get")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"actions": actions,
				"err":     err})).Error("ActionsWithLogrus: method Get returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"actions": actions,
				"err":     err})).Debug("ActionsWithLogrus: method Get finished")
		}
	}()
	return _d._base.Get(ctx, filter)
}

// GetByID implements Actions
func (_d ActionsWithLogrus) GetByID(ctx context.Context, id primitive.ObjectID) (action domain.Action, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx": ctx,
		"id":  id})).Debug("ActionsWithLogrus: calling GetByID")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"action": action,
				"err":    err})).Error("ActionsWithLogrus: method GetByID returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"action": action,
				"err":    err})).Debug("ActionsWithLogrus: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// Update implements Actions
func (_d ActionsWithLogrus) Update(ctx context.Context, action domain.Action, file interface{}) (actionRes domain.Action, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"action": action,
		"file":   file})).Debug("ActionsWithLogrus: calling Update")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"actionRes": actionRes,
				"err":       err})).Error("ActionsWithLogrus: method Update returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"actionRes": actionRes,
				"err":       err})).Debug("ActionsWithLogrus: method Update finished")
		}
	}()
	return _d._base.Update(ctx, action, file)
}

// UpdateOrder implements Actions
func (_d ActionsWithLogrus) UpdateOrder(ctx context.Context, first domain.UpdateOrder, second domain.UpdateOrder) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"first":  first,
		"second": second})).Debug("ActionsWithLogrus: calling UpdateOrder")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("ActionsWithLogrus: method UpdateOrder returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("ActionsWithLogrus: method UpdateOrder finished")
		}
	}()
	return _d._base.UpdateOrder(ctx, first, second)
}
