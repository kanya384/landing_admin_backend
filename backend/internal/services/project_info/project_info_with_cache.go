package project_info

// Code generated by gowrap. DO NOT EDIT.
// template: ../../generated/wrappers/cache
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/project_info -i ProjectInfo -t ../../generated/wrappers/cache -o project_info_with_cache.go -l ""

import (
	"context"
	"io"
	"landing_admin_backend/internal/domain"
	"landing_admin_backend/internal/services/memcache"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// ProjectInfoWithCache implements ProjectInfo that is instrumented with logging
type ProjectInfoWithCache struct {
	cache memcache.Cache
	_base ProjectInfo
}

// NewProjectInfoWithCache instruments an implementation of the ProjectInfo with simple logging
func NewProjectInfoWithCache(base ProjectInfo, cache memcache.Cache) ProjectInfoWithCache {
	return ProjectInfoWithCache{
		_base: base,
		cache: cache,
	}
}

// Create implements ProjectInfo
func (_d ProjectInfoWithCache) Create(ctx context.Context, projectInfo domain.ProjectInfo, file io.ReadCloser) (projectInfoRes domain.ProjectInfo, err error) {
	defer _d.cache.Delete("ProjectInfo")

	return _d._base.Create(ctx, projectInfo, file)
}

// Delete implements ProjectInfo
func (_d ProjectInfoWithCache) Delete(ctx context.Context, projectInfoID primitive.ObjectID) (err error) {
	defer _d.cache.Delete("ProjectInfo")

	return _d._base.Delete(ctx, projectInfoID)
}

// Get implements ProjectInfo
func (_d ProjectInfoWithCache) Get(ctx context.Context, filter map[string]interface{}) (projectInfos []*domain.ProjectInfo, err error) {
	cached, ok := _d.cache.Get("ProjectInfo")
	if ok {

		return cached.Value.([]*domain.ProjectInfo), err

	}
	res, err := _d._base.Get(ctx, filter)
	if err != nil {
		return
	}
	_d.cache.Set("ProjectInfo", res)
	return res, err
}

// GetByID implements ProjectInfo
func (_d ProjectInfoWithCache) GetByID(ctx context.Context, id primitive.ObjectID) (projectInfo domain.ProjectInfo, err error) {
	return _d._base.GetByID(ctx, id)
}

// Update implements ProjectInfo
func (_d ProjectInfoWithCache) Update(ctx context.Context, projectInfo domain.ProjectInfo, file interface{}) (projectInfoRes domain.ProjectInfo, err error) {
	defer _d.cache.Delete("ProjectInfo")

	return _d._base.Update(ctx, projectInfo, file)
}

// UpdateOrder implements ProjectInfo
func (_d ProjectInfoWithCache) UpdateOrder(ctx context.Context, first domain.UpdateOrder, second domain.UpdateOrder) (err error) {
	defer _d.cache.Delete("ProjectInfo")

	return _d._base.UpdateOrder(ctx, first, second)
}
