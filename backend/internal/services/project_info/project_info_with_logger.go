package project_info

// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/project_info -i ProjectInfo -t https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus -o project_info_with_logger.go -l ""

import (
	"context"
	"io"
	"landing_admin_backend/internal/domain"

	"github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// ProjectInfoWithLogrus implements ProjectInfo that is instrumented with logrus logger
type ProjectInfoWithLogrus struct {
	_log  *logrus.Entry
	_base ProjectInfo
}

// NewProjectInfoWithLogrus instruments an implementation of the ProjectInfo with simple logging
func NewProjectInfoWithLogrus(base ProjectInfo, log *logrus.Entry) ProjectInfoWithLogrus {
	return ProjectInfoWithLogrus{
		_base: base,
		_log:  log,
	}
}

// Create implements ProjectInfo
func (_d ProjectInfoWithLogrus) Create(ctx context.Context, projectInfo domain.ProjectInfo, file io.ReadCloser) (projectInfoRes domain.ProjectInfo, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":         ctx,
		"projectInfo": projectInfo,
		"file":        file})).Debug("ProjectInfoWithLogrus: calling Create")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"projectInfoRes": projectInfoRes,
				"err":            err})).Error("ProjectInfoWithLogrus: method Create returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"projectInfoRes": projectInfoRes,
				"err":            err})).Debug("ProjectInfoWithLogrus: method Create finished")
		}
	}()
	return _d._base.Create(ctx, projectInfo, file)
}

// Delete implements ProjectInfo
func (_d ProjectInfoWithLogrus) Delete(ctx context.Context, projectInfoID primitive.ObjectID) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":           ctx,
		"projectInfoID": projectInfoID})).Debug("ProjectInfoWithLogrus: calling Delete")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("ProjectInfoWithLogrus: method Delete returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("ProjectInfoWithLogrus: method Delete finished")
		}
	}()
	return _d._base.Delete(ctx, projectInfoID)
}

// Get implements ProjectInfo
func (_d ProjectInfoWithLogrus) Get(ctx context.Context, filter map[string]interface{}) (projectInfos []*domain.ProjectInfo, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"filter": filter})).Debug("ProjectInfoWithLogrus: calling Get")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"projectInfos": projectInfos,
				"err":          err})).Error("ProjectInfoWithLogrus: method Get returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"projectInfos": projectInfos,
				"err":          err})).Debug("ProjectInfoWithLogrus: method Get finished")
		}
	}()
	return _d._base.Get(ctx, filter)
}

// GetByID implements ProjectInfo
func (_d ProjectInfoWithLogrus) GetByID(ctx context.Context, id primitive.ObjectID) (projectInfo domain.ProjectInfo, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx": ctx,
		"id":  id})).Debug("ProjectInfoWithLogrus: calling GetByID")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"projectInfo": projectInfo,
				"err":         err})).Error("ProjectInfoWithLogrus: method GetByID returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"projectInfo": projectInfo,
				"err":         err})).Debug("ProjectInfoWithLogrus: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// Update implements ProjectInfo
func (_d ProjectInfoWithLogrus) Update(ctx context.Context, projectInfo domain.ProjectInfo, file interface{}) (projectInfoRes domain.ProjectInfo, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":         ctx,
		"projectInfo": projectInfo,
		"file":        file})).Debug("ProjectInfoWithLogrus: calling Update")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"projectInfoRes": projectInfoRes,
				"err":            err})).Error("ProjectInfoWithLogrus: method Update returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"projectInfoRes": projectInfoRes,
				"err":            err})).Debug("ProjectInfoWithLogrus: method Update finished")
		}
	}()
	return _d._base.Update(ctx, projectInfo, file)
}

// UpdateOrder implements ProjectInfo
func (_d ProjectInfoWithLogrus) UpdateOrder(ctx context.Context, first domain.UpdateOrder, second domain.UpdateOrder) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"first":  first,
		"second": second})).Debug("ProjectInfoWithLogrus: calling UpdateOrder")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("ProjectInfoWithLogrus: method UpdateOrder returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("ProjectInfoWithLogrus: method UpdateOrder finished")
		}
	}()
	return _d._base.UpdateOrder(ctx, first, second)
}
