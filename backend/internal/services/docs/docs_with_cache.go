package docs

// Code generated by gowrap. DO NOT EDIT.
// template: ../../generated/wrappers/cache
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/docs -i Docs -t ../../generated/wrappers/cache -o docs_with_cache.go -l ""

import (
	"context"
	"io"
	"landing_admin_backend/internal/domain"
	"landing_admin_backend/internal/services/memcache"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// DocsWithCache implements Docs that is instrumented with logging
type DocsWithCache struct {
	cache memcache.Cache
	_base Docs
}

// NewDocsWithCache instruments an implementation of the Docs with simple logging
func NewDocsWithCache(base Docs, cache memcache.Cache) DocsWithCache {
	return DocsWithCache{
		_base: base,
		cache: cache,
	}
}

// Create implements Docs
func (_d DocsWithCache) Create(ctx context.Context, doc domain.Doc, file io.ReadCloser, fileName string) (d1 domain.Doc, err error) {
	defer _d.cache.Delete("Docs")

	return _d._base.Create(ctx, doc, file, fileName)
}

// Delete implements Docs
func (_d DocsWithCache) Delete(ctx context.Context, docID primitive.ObjectID) (err error) {
	defer _d.cache.Delete("Docs")

	return _d._base.Delete(ctx, docID)
}

// Get implements Docs
func (_d DocsWithCache) Get(ctx context.Context) (docs []*domain.Doc, err error) {
	cached, ok := _d.cache.Get("Docs")
	if ok {

		return cached.Value.([]*domain.Doc), err

	}
	res, err := _d._base.Get(ctx)
	if err != nil {
		return
	}
	_d.cache.Set("Docs", res)
	return res, err
}

// Update implements Docs
func (_d DocsWithCache) Update(ctx context.Context, doc domain.Doc, file interface{}, fileName string) (d1 domain.Doc, err error) {
	defer _d.cache.Delete("Docs")

	return _d._base.Update(ctx, doc, file, fileName)
}
