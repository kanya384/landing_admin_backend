package advantage_photo

// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/advantage_photo -i AdvantagePhoto -t https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus -o advantage_photo_with_logger.go -l ""

import (
	"context"
	"io"
	"landing_admin_backend/internal/domain"

	"github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// AdvantagePhotoWithLogrus implements AdvantagePhoto that is instrumented with logrus logger
type AdvantagePhotoWithLogrus struct {
	_log  *logrus.Entry
	_base AdvantagePhoto
}

// NewAdvantagePhotoWithLogrus instruments an implementation of the AdvantagePhoto with simple logging
func NewAdvantagePhotoWithLogrus(base AdvantagePhoto, log *logrus.Entry) AdvantagePhotoWithLogrus {
	return AdvantagePhotoWithLogrus{
		_base: base,
		_log:  log,
	}
}

// Create implements AdvantagePhoto
func (_d AdvantagePhotoWithLogrus) Create(ctx context.Context, advantagePhoto domain.AdvantagePhoto, file io.ReadCloser) (advantagePhotoRes domain.AdvantagePhoto, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":            ctx,
		"advantagePhoto": advantagePhoto,
		"file":           file})).Debug("AdvantagePhotoWithLogrus: calling Create")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"advantagePhotoRes": advantagePhotoRes,
				"err":               err})).Error("AdvantagePhotoWithLogrus: method Create returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"advantagePhotoRes": advantagePhotoRes,
				"err":               err})).Debug("AdvantagePhotoWithLogrus: method Create finished")
		}
	}()
	return _d._base.Create(ctx, advantagePhoto, file)
}

// Delete implements AdvantagePhoto
func (_d AdvantagePhotoWithLogrus) Delete(ctx context.Context, advantagePhotoID primitive.ObjectID) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":              ctx,
		"advantagePhotoID": advantagePhotoID})).Debug("AdvantagePhotoWithLogrus: calling Delete")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("AdvantagePhotoWithLogrus: method Delete returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("AdvantagePhotoWithLogrus: method Delete finished")
		}
	}()
	return _d._base.Delete(ctx, advantagePhotoID)
}

// Get implements AdvantagePhoto
func (_d AdvantagePhotoWithLogrus) Get(ctx context.Context, advantageID primitive.ObjectID) (list []domain.AdvantagePhoto, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":         ctx,
		"advantageID": advantageID})).Debug("AdvantagePhotoWithLogrus: calling Get")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"list": list,
				"err":  err})).Error("AdvantagePhotoWithLogrus: method Get returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"list": list,
				"err":  err})).Debug("AdvantagePhotoWithLogrus: method Get finished")
		}
	}()
	return _d._base.Get(ctx, advantageID)
}

// UpdateOrder implements AdvantagePhoto
func (_d AdvantagePhotoWithLogrus) UpdateOrder(ctx context.Context, first domain.UpdateOrder, second domain.UpdateOrder) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"first":  first,
		"second": second})).Debug("AdvantagePhotoWithLogrus: calling UpdateOrder")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("AdvantagePhotoWithLogrus: method UpdateOrder returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("AdvantagePhotoWithLogrus: method UpdateOrder finished")
		}
	}()
	return _d._base.UpdateOrder(ctx, first, second)
}
