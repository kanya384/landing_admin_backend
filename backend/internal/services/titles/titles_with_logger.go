package titles

// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/titles -i Title -t https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus -o titles_with_logger.go -l ""

import (
	"context"
	"landing_admin_backend/internal/domain"

	"github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// TitleWithLogrus implements Title that is instrumented with logrus logger
type TitleWithLogrus struct {
	_log  *logrus.Entry
	_base Title
}

// NewTitleWithLogrus instruments an implementation of the Title with simple logging
func NewTitleWithLogrus(base Title, log *logrus.Entry) TitleWithLogrus {
	return TitleWithLogrus{
		_base: base,
		_log:  log,
	}
}

// Create implements Title
func (_d TitleWithLogrus) Create(ctx context.Context, title domain.Title) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":   ctx,
		"title": title})).Debug("TitleWithLogrus: calling Create")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("TitleWithLogrus: method Create returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("TitleWithLogrus: method Create finished")
		}
	}()
	return _d._base.Create(ctx, title)
}

// Delete implements Title
func (_d TitleWithLogrus) Delete(ctx context.Context, titleID primitive.ObjectID) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":     ctx,
		"titleID": titleID})).Debug("TitleWithLogrus: calling Delete")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("TitleWithLogrus: method Delete returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("TitleWithLogrus: method Delete finished")
		}
	}()
	return _d._base.Delete(ctx, titleID)
}

// Get implements Title
func (_d TitleWithLogrus) Get(ctx context.Context) (titles []*domain.Title, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx": ctx})).Debug("TitleWithLogrus: calling Get")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"titles": titles,
				"err":    err})).Error("TitleWithLogrus: method Get returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"titles": titles,
				"err":    err})).Debug("TitleWithLogrus: method Get finished")
		}
	}()
	return _d._base.Get(ctx)
}

// Update implements Title
func (_d TitleWithLogrus) Update(ctx context.Context, title domain.Title) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":   ctx,
		"title": title})).Debug("TitleWithLogrus: calling Update")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("TitleWithLogrus: method Update returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("TitleWithLogrus: method Update finished")
		}
	}()
	return _d._base.Update(ctx, title)
}
