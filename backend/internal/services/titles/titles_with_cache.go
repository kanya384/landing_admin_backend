package titles

// Code generated by gowrap. DO NOT EDIT.
// template: ../../generated/wrappers/cache
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/titles -i Title -t ../../generated/wrappers/cache -o titles_with_cache.go -l ""

import (
	"context"
	"landing_admin_backend/internal/domain"
	"landing_admin_backend/internal/services/memcache"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// TitleWithCache implements Title that is instrumented with logging
type TitleWithCache struct {
	cache memcache.Cache
	_base Title
}

// NewTitleWithCache instruments an implementation of the Title with simple logging
func NewTitleWithCache(base Title, cache memcache.Cache) TitleWithCache {
	return TitleWithCache{
		_base: base,
		cache: cache,
	}
}

// Create implements Title
func (_d TitleWithCache) Create(ctx context.Context, title domain.Title) (err error) {
	defer _d.cache.Delete("Title")

	return _d._base.Create(ctx, title)
}

// Delete implements Title
func (_d TitleWithCache) Delete(ctx context.Context, titleID primitive.ObjectID) (err error) {
	defer _d.cache.Delete("Title")

	return _d._base.Delete(ctx, titleID)
}

// Get implements Title
func (_d TitleWithCache) Get(ctx context.Context) (titles []*domain.Title, err error) {
	cached, ok := _d.cache.Get("Title")
	if ok {

		return cached.Value.([]*domain.Title), err

	}
	res, err := _d._base.Get(ctx)
	if err != nil {
		return
	}
	_d.cache.Set("Title", res)
	return res, err
}

// Update implements Title
func (_d TitleWithCache) Update(ctx context.Context, title domain.Title) (err error) {
	defer _d.cache.Delete("Title")

	return _d._base.Update(ctx, title)
}
