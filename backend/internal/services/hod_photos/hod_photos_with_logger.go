package hod_photos

// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/hod_photos -i Photos -t https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus -o hod_photos_with_logger.go -l ""

import (
	"context"
	"io"
	"landing_admin_backend/internal/domain"

	"github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// PhotosWithLogrus implements Photos that is instrumented with logrus logger
type PhotosWithLogrus struct {
	_log  *logrus.Entry
	_base Photos
}

// NewPhotosWithLogrus instruments an implementation of the Photos with simple logging
func NewPhotosWithLogrus(base Photos, log *logrus.Entry) PhotosWithLogrus {
	return PhotosWithLogrus{
		_base: base,
		_log:  log,
	}
}

// Create implements Photos
func (_d PhotosWithLogrus) Create(ctx context.Context, hodPhoto domain.HodPhoto, file io.ReadCloser) (hodPhotoRes domain.HodPhoto, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":      ctx,
		"hodPhoto": hodPhoto,
		"file":     file})).Debug("PhotosWithLogrus: calling Create")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"hodPhotoRes": hodPhotoRes,
				"err":         err})).Error("PhotosWithLogrus: method Create returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"hodPhotoRes": hodPhotoRes,
				"err":         err})).Debug("PhotosWithLogrus: method Create finished")
		}
	}()
	return _d._base.Create(ctx, hodPhoto, file)
}

// Delete implements Photos
func (_d PhotosWithLogrus) Delete(ctx context.Context, hodPhotoID primitive.ObjectID) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":        ctx,
		"hodPhotoID": hodPhotoID})).Debug("PhotosWithLogrus: calling Delete")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("PhotosWithLogrus: method Delete returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("PhotosWithLogrus: method Delete finished")
		}
	}()
	return _d._base.Delete(ctx, hodPhotoID)
}

// Get implements Photos
func (_d PhotosWithLogrus) Get(ctx context.Context, monthID primitive.ObjectID) (hodPhotos []domain.HodPhoto, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":     ctx,
		"monthID": monthID})).Debug("PhotosWithLogrus: calling Get")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"hodPhotos": hodPhotos,
				"err":       err})).Error("PhotosWithLogrus: method Get returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"hodPhotos": hodPhotos,
				"err":       err})).Debug("PhotosWithLogrus: method Get finished")
		}
	}()
	return _d._base.Get(ctx, monthID)
}

// UpdateOrder implements Photos
func (_d PhotosWithLogrus) UpdateOrder(ctx context.Context, first domain.UpdateOrder, second domain.UpdateOrder) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"first":  first,
		"second": second})).Debug("PhotosWithLogrus: calling UpdateOrder")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("PhotosWithLogrus: method UpdateOrder returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("PhotosWithLogrus: method UpdateOrder finished")
		}
	}()
	return _d._base.UpdateOrder(ctx, first, second)
}
