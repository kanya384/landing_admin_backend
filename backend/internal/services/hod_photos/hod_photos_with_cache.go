package hod_photos

// Code generated by gowrap. DO NOT EDIT.
// template: ../../generated/wrappers/cache
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/hod_photos -i Photos -t ../../generated/wrappers/cache -o hod_photos_with_cache.go -l ""

import (
	"context"
	"io"
	"landing_admin_backend/internal/domain"
	"landing_admin_backend/internal/services/memcache"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// PhotosWithCache implements Photos that is instrumented with logging
type PhotosWithCache struct {
	cache memcache.Cache
	_base Photos
}

// NewPhotosWithCache instruments an implementation of the Photos with simple logging
func NewPhotosWithCache(base Photos, cache memcache.Cache) PhotosWithCache {
	return PhotosWithCache{
		_base: base,
		cache: cache,
	}
}

// Create implements Photos
func (_d PhotosWithCache) Create(ctx context.Context, hodPhoto domain.HodPhoto, file io.ReadCloser) (hodPhotoRes domain.HodPhoto, err error) {
	defer _d.cache.Delete("Photos")

	return _d._base.Create(ctx, hodPhoto, file)
}

// Delete implements Photos
func (_d PhotosWithCache) Delete(ctx context.Context, hodPhotoID primitive.ObjectID) (err error) {
	defer _d.cache.Delete("Photos")

	return _d._base.Delete(ctx, hodPhotoID)
}

// Get implements Photos
func (_d PhotosWithCache) Get(ctx context.Context, monthID primitive.ObjectID) (hodPhotos []domain.HodPhoto, err error) {
	cached, ok := _d.cache.Get("Photos")
	if ok {

		return cached.Value.([]domain.HodPhoto), err

	}
	res, err := _d._base.Get(ctx, monthID)
	if err != nil {
		return
	}
	_d.cache.Set("Photos", res)
	return res, err
}

// UpdateOrder implements Photos
func (_d PhotosWithCache) UpdateOrder(ctx context.Context, first domain.UpdateOrder, second domain.UpdateOrder) (err error) {
	defer _d.cache.Delete("Photos")

	return _d._base.UpdateOrder(ctx, first, second)
}
