package years

// Code generated by gowrap. DO NOT EDIT.
// template: ../../generated/wrappers/cache
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/years -i Years -t ../../generated/wrappers/cache -o years_with_cache.go -l ""

import (
	"context"
	"landing_admin_backend/internal/domain"
	"landing_admin_backend/internal/services/memcache"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// YearsWithCache implements Years that is instrumented with logging
type YearsWithCache struct {
	cache memcache.Cache
	_base Years
}

// NewYearsWithCache instruments an implementation of the Years with simple logging
func NewYearsWithCache(base Years, cache memcache.Cache) YearsWithCache {
	return YearsWithCache{
		_base: base,
		cache: cache,
	}
}

// Create implements Years
func (_d YearsWithCache) Create(ctx context.Context, year domain.Year) (err error) {
	defer _d.cache.Delete("Years")

	return _d._base.Create(ctx, year)
}

// Delete implements Years
func (_d YearsWithCache) Delete(ctx context.Context, yearID primitive.ObjectID) (err error) {
	defer _d.cache.Delete("Years")

	return _d._base.Delete(ctx, yearID)
}

// Get implements Years
func (_d YearsWithCache) Get(ctx context.Context) (years []domain.Year, err error) {
	cached, ok := _d.cache.Get("Years")
	if ok {

		return cached.Value.([]domain.Year), err

	}
	res, err := _d._base.Get(ctx)
	if err != nil {
		return
	}
	_d.cache.Set("Years", res)
	return res, err
}

// Update implements Years
func (_d YearsWithCache) Update(ctx context.Context, year domain.Year) (err error) {
	defer _d.cache.Delete("Years")

	return _d._base.Update(ctx, year)
}
