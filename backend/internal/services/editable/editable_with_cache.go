package editable

// Code generated by gowrap. DO NOT EDIT.
// template: ../../generated/wrappers/cache
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/editable -i Editable -t ../../generated/wrappers/cache -o editable_with_cache.go -l ""

import (
	"context"
	"landing_admin_backend/internal/domain"
	"landing_admin_backend/pkg/memcache"
)

// EditableWithCache implements Editable that is instrumented with logging
type EditableWithCache struct {
	cache memcache.Cache
	_base Editable
}

// NewEditableWithCache instruments an implementation of the Editable with simple logging
func NewEditableWithCache(base Editable, cache memcache.Cache) EditableWithCache {
	return EditableWithCache{
		_base: base,
		cache: cache,
	}
}

// CreateOrUpdate implements Editable
func (_d EditableWithCache) CreateOrUpdate(ctx context.Context, editable domain.Editable) (err error) {
	defer _d.cache.Delete("Editable")

	return _d._base.CreateOrUpdate(ctx, editable)
}

// Get implements Editable
func (_d EditableWithCache) Get(ctx context.Context) (ediatables []*domain.Editable, err error) {
	cached, ok := _d.cache.Get("Editable")
	if ok {

		return cached.Value.([]*domain.Editable), err

	}
	res, err := _d._base.Get(ctx)
	if err != nil {
		return
	}
	_d.cache.Set("Editable", res)
	return res, err
}
