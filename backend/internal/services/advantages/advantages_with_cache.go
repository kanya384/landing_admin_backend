package advantages

// Code generated by gowrap. DO NOT EDIT.
// template: ../../generated/wrappers/cache
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/advantages -i Advantages -t ../../generated/wrappers/cache -o advantages_with_cache.go -l ""

import (
	"context"
	"landing_admin_backend/internal/domain"
	"landing_admin_backend/pkg/memcache"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// AdvantagesWithCache implements Advantages that is instrumented with logging
type AdvantagesWithCache struct {
	cache memcache.Cache
	_base Advantages
}

// NewAdvantagesWithCache instruments an implementation of the Advantages with simple logging
func NewAdvantagesWithCache(base Advantages, cache memcache.Cache) AdvantagesWithCache {
	return AdvantagesWithCache{
		_base: base,
		cache: cache,
	}
}

// Create implements Advantages
func (_d AdvantagesWithCache) Create(ctx context.Context, advantage domain.Advantage) (err error) {
	defer _d.cache.Delete("Advantages")

	return _d._base.Create(ctx, advantage)
}

// Delete implements Advantages
func (_d AdvantagesWithCache) Delete(ctx context.Context, advantageID primitive.ObjectID) (err error) {
	defer _d.cache.Delete("Advantages")

	return _d._base.Delete(ctx, advantageID)
}

// Get implements Advantages
func (_d AdvantagesWithCache) Get(ctx context.Context) (advantages []*domain.Advantage, err error) {
	cached, ok := _d.cache.Get("Advantages")
	if ok {

		return cached.Value.([]*domain.Advantage), err

	}
	res, err := _d._base.Get(ctx)
	if err != nil {
		return
	}
	_d.cache.Set("Advantages", res)
	return res, err
}

// GetByID implements Advantages
func (_d AdvantagesWithCache) GetByID(ctx context.Context, id primitive.ObjectID) (advantage domain.Advantage, err error) {
	return _d._base.GetByID(ctx, id)
}

// Update implements Advantages
func (_d AdvantagesWithCache) Update(ctx context.Context, advantage domain.Advantage) (err error) {
	defer _d.cache.Delete("Advantages")

	return _d._base.Update(ctx, advantage)
}

// UpdateOrder implements Advantages
func (_d AdvantagesWithCache) UpdateOrder(ctx context.Context, first domain.UpdateOrder, second domain.UpdateOrder) (err error) {
	defer _d.cache.Delete("Advantages")

	return _d._base.UpdateOrder(ctx, first, second)
}
