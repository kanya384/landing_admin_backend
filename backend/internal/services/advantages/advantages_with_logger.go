package advantages

// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/advantages -i Advantages -t https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus -o advantages_with_logger.go -l ""

import (
	"context"
	"landing_admin_backend/internal/domain"

	"github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// AdvantagesWithLogrus implements Advantages that is instrumented with logrus logger
type AdvantagesWithLogrus struct {
	_log  *logrus.Entry
	_base Advantages
}

// NewAdvantagesWithLogrus instruments an implementation of the Advantages with simple logging
func NewAdvantagesWithLogrus(base Advantages, log *logrus.Entry) AdvantagesWithLogrus {
	return AdvantagesWithLogrus{
		_base: base,
		_log:  log,
	}
}

// Create implements Advantages
func (_d AdvantagesWithLogrus) Create(ctx context.Context, advantage domain.Advantage) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":       ctx,
		"advantage": advantage})).Debug("AdvantagesWithLogrus: calling Create")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("AdvantagesWithLogrus: method Create returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("AdvantagesWithLogrus: method Create finished")
		}
	}()
	return _d._base.Create(ctx, advantage)
}

// Delete implements Advantages
func (_d AdvantagesWithLogrus) Delete(ctx context.Context, advantageID primitive.ObjectID) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":         ctx,
		"advantageID": advantageID})).Debug("AdvantagesWithLogrus: calling Delete")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("AdvantagesWithLogrus: method Delete returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("AdvantagesWithLogrus: method Delete finished")
		}
	}()
	return _d._base.Delete(ctx, advantageID)
}

// Get implements Advantages
func (_d AdvantagesWithLogrus) Get(ctx context.Context) (advantages []*domain.Advantage, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx": ctx})).Debug("AdvantagesWithLogrus: calling Get")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"advantages": advantages,
				"err":        err})).Error("AdvantagesWithLogrus: method Get returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"advantages": advantages,
				"err":        err})).Debug("AdvantagesWithLogrus: method Get finished")
		}
	}()
	return _d._base.Get(ctx)
}

// GetByID implements Advantages
func (_d AdvantagesWithLogrus) GetByID(ctx context.Context, id primitive.ObjectID) (advantage domain.Advantage, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx": ctx,
		"id":  id})).Debug("AdvantagesWithLogrus: calling GetByID")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"advantage": advantage,
				"err":       err})).Error("AdvantagesWithLogrus: method GetByID returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"advantage": advantage,
				"err":       err})).Debug("AdvantagesWithLogrus: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// Update implements Advantages
func (_d AdvantagesWithLogrus) Update(ctx context.Context, advantage domain.Advantage) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":       ctx,
		"advantage": advantage})).Debug("AdvantagesWithLogrus: calling Update")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("AdvantagesWithLogrus: method Update returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("AdvantagesWithLogrus: method Update finished")
		}
	}()
	return _d._base.Update(ctx, advantage)
}

// UpdateOrder implements Advantages
func (_d AdvantagesWithLogrus) UpdateOrder(ctx context.Context, first domain.UpdateOrder, second domain.UpdateOrder) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":    ctx,
		"first":  first,
		"second": second})).Debug("AdvantagesWithLogrus: calling UpdateOrder")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("AdvantagesWithLogrus: method UpdateOrder returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("AdvantagesWithLogrus: method UpdateOrder finished")
		}
	}()
	return _d._base.UpdateOrder(ctx, first, second)
}
