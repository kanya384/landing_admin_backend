package plans

// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/plans -i Plans -t https://raw.githubusercontent.com/hexdigest/gowrap/bd05dcaf6963696b62ac150a98a59674456c6c53/templates/logrus -o plans_with_logger.go -l ""

import (
	"io"
	"landing_admin_backend/internal/domain"

	"github.com/sirupsen/logrus"
	"golang.org/x/net/context"
)

// PlansWithLogrus implements Plans that is instrumented with logrus logger
type PlansWithLogrus struct {
	_log  *logrus.Entry
	_base Plans
}

// NewPlansWithLogrus instruments an implementation of the Plans with simple logging
func NewPlansWithLogrus(base Plans, log *logrus.Entry) PlansWithLogrus {
	return PlansWithLogrus{
		_base: base,
		_log:  log,
	}
}

// GetActivePlans implements Plans
func (_d PlansWithLogrus) GetActivePlans(ctx context.Context) (plans []*domain.Plan, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx": ctx})).Debug("PlansWithLogrus: calling GetActivePlans")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"plans": plans,
				"err":   err})).Error("PlansWithLogrus: method GetActivePlans returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"plans": plans,
				"err":   err})).Debug("PlansWithLogrus: method GetActivePlans finished")
		}
	}()
	return _d._base.GetActivePlans(ctx)
}

// GetPlans implements Plans
func (_d PlansWithLogrus) GetPlans(ctx context.Context) (plans []*domain.Plan, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx": ctx})).Debug("PlansWithLogrus: calling GetPlans")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"plans": plans,
				"err":   err})).Error("PlansWithLogrus: method GetPlans returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"plans": plans,
				"err":   err})).Debug("PlansWithLogrus: method GetPlans finished")
		}
	}()
	return _d._base.GetPlans(ctx)
}

// ProcessPlans implements Plans
func (_d PlansWithLogrus) ProcessPlans(ctx context.Context, plansList [][]string) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":       ctx,
		"plansList": plansList})).Debug("PlansWithLogrus: calling ProcessPlans")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("PlansWithLogrus: method ProcessPlans returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("PlansWithLogrus: method ProcessPlans finished")
		}
	}()
	return _d._base.ProcessPlans(ctx, plansList)
}

// UpdatePlansActivity implements Plans
func (_d PlansWithLogrus) UpdatePlansActivity(ctx context.Context, id string, flag bool) (err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":  ctx,
		"id":   id,
		"flag": flag})).Debug("PlansWithLogrus: calling UpdatePlansActivity")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Error("PlansWithLogrus: method UpdatePlansActivity returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"err": err})).Debug("PlansWithLogrus: method UpdatePlansActivity finished")
		}
	}()
	return _d._base.UpdatePlansActivity(ctx, id, flag)
}

// UpdatePlansPhoto implements Plans
func (_d PlansWithLogrus) UpdatePlansPhoto(ctx context.Context, file io.Reader, id string) (plan domain.Plan, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":  ctx,
		"file": file,
		"id":   id})).Debug("PlansWithLogrus: calling UpdatePlansPhoto")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"plan": plan,
				"err":  err})).Error("PlansWithLogrus: method UpdatePlansPhoto returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"plan": plan,
				"err":  err})).Debug("PlansWithLogrus: method UpdatePlansPhoto finished")
		}
	}()
	return _d._base.UpdatePlansPhoto(ctx, file, id)
}
