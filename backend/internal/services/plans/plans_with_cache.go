package plans

// Code generated by gowrap. DO NOT EDIT.
// template: ../../generated/wrappers/cache
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p landing_admin_backend/internal/services/plans -i Plans -t ../../generated/wrappers/cache -o plans_with_cache.go -l ""

import (
	"io"
	"landing_admin_backend/internal/domain"
	"landing_admin_backend/pkg/memcache"

	"golang.org/x/net/context"
)

// PlansWithCache implements Plans that is instrumented with logging
type PlansWithCache struct {
	cache memcache.Cache
	_base Plans
}

// NewPlansWithCache instruments an implementation of the Plans with simple logging
func NewPlansWithCache(base Plans, cache memcache.Cache) PlansWithCache {
	return PlansWithCache{
		_base: base,
		cache: cache,
	}
}

// GetActivePlans implements Plans
func (_d PlansWithCache) GetActivePlans(ctx context.Context) (plans []*domain.Plan, err error) {
	return _d._base.GetActivePlans(ctx)
}

// GetPlans implements Plans
func (_d PlansWithCache) GetPlans(ctx context.Context) (plans []*domain.Plan, err error) {
	return _d._base.GetPlans(ctx)
}

// ProcessPlans implements Plans
func (_d PlansWithCache) ProcessPlans(ctx context.Context, plansList [][]string) (err error) {
	return _d._base.ProcessPlans(ctx, plansList)
}

// UpdatePlansActivity implements Plans
func (_d PlansWithCache) UpdatePlansActivity(ctx context.Context, id string, flag bool) (err error) {
	return _d._base.UpdatePlansActivity(ctx, id, flag)
}

// UpdatePlansPhoto implements Plans
func (_d PlansWithCache) UpdatePlansPhoto(ctx context.Context, file io.Reader, id string) (plan domain.Plan, err error) {
	return _d._base.UpdatePlansPhoto(ctx, file, id)
}
