swagger: "2.0"
info:
  version: "1.0.0"
  title: "Landing Backend REST"
host: "localhost:8080"
basePath: /
schemes:
- "http"
securityDefinitions:
  Token:
    type: apiKey
    name: Authorization
    in: header
paths:
  /login:
    post:
      summary: "authentication path"
      parameters:
        - in: body
          name: params
          schema:
              $ref: '#/definitions/AuthenticateRequest'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 'регистрация успешна'
          schema:
            $ref: '#/definitions/AuthenticateResponse'
        '403':
          description: 'Authentication Fail'
          schema:
            $ref: '#/definitions/AuthenticateResponse'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/AuthenticateResponse'
        '500':
          description: 'Internal Server Error'
  /users:
    put:
      summary: "create user"
      security:
        - Token: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: params
          schema:
            $ref: '#/definitions/UserCreateRequest'
      responses:
        '200':
          description: 'пользователь успешно создан'
          schema:
            $ref: '#/definitions/ResultResponse'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
  /ping:
    get:
      summary: "authorization check"
      security:
        - Token: []
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 'пользователь авторизован'
          schema:
            $ref: '#/definitions/ResultResponse'
        '401':
          description: 'необходимо авторизоваться'
          schema:
            $ref: '#/definitions/ResultResponse'
  #posters
  /posters:
    get:
      summary: "gets filtered posters list"
      tags:
        - posters
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 'returns filtered posters'
          schema:
            $ref: '#/definitions/GetPostersResponse'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal Server Error'
    put:
      summary: "create poster"
      security:
        - Token: []
      consumes:
        - multipart/form-data
      produces:
        - application/json
      tags:
        - posters
      parameters:
        - in: formData
          name: file
          type: file
          required: true
          description: The file to upload
        - in: formData
          name: title
          type: string
          required: true
        - in: formData
          name: description
          type: string
          required: true
      responses:
        '200':
          description: 'постер успешно создан'
          schema:
            $ref: '#/definitions/Poster'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
    patch:
      summary: "update poster"
      security:
        - Token: []
      tags:
        - posters
      consumes:
         - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: formData
          name: file
          type: file
          required: false
          description: The file to upload
        - in: formData
          name: id
          type: string
          required: true
        - in: formData
          name: title
          type: string
          required: true
        - in: formData
          name: description
          type: string
          required: true
        - in: formData
          name: active
          type: boolean
          required: true
        - in: formData
          name: photo
          type: string
          required: false
        - in: formData
          name: order
          type: integer
          required: true
      responses:
        '200':
          description: 'постер успешно создан'
          schema:
            $ref: '#/definitions/ResultResponse'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
  /posters/orders:
    post:
      summary: "updates posters oders"
      security:
        - Token: []
      tags:
        - posters
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: params
          schema:
            $ref: '#/definitions/SwapStruct'
          description: swap item orders
      responses:
        '200':
          description: 'положения успешно обновленны'
          schema:
            $ref: '#/definitions/ResultResponse'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
  /posters/{posterID}: 
    get:
      summary: "get poster by id"
      security:
        - Token: []
      tags:
        - posters
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: posterID
          type: string
          required: true
          description: String ID of the poster to get
      responses:
        '200':
          description: 'returns requested poster'
          schema:
            $ref: '#/definitions/Poster'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal Server Error'
    delete:
      summary: "delete poster by id"
      security:
        - Token: []
      tags:
        - posters
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: posterID
          type: string
          required: true
          description: String ID of the poster to get
      responses:
        '200':
          description: 'returns requested poster'
          schema:
            $ref: '#/definitions/ResultResponse'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal Server Error'
  #hod
  /years:
    get:
      summary: "gets years list"
      security:
        - Token: []
      tags:
        - hod
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 'returns years list'
          schema:
            $ref: '#/definitions/GetYearsResponse'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal Server Error'
    put:
      summary: "create year"
      security:
        - Token: []
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - hod
      parameters:
        - in: body
          name: params
          schema:
            $ref: '#/definitions/Year'
      responses:
        '200':
          description: 'год успешно создан'
          schema:
            $ref: '#/definitions/Year'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
    patch:
      summary: "update year"
      security:
        - Token: []
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - hod
      parameters:
        - in: body
          name: params
          schema:
            $ref: '#/definitions/Year'
      responses:
        '200':
          description: 'Request success'
          schema:
            $ref: '#/definitions/Year'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
  /years/{id}:
    delete:
      summary: "delete year by id"
      security:
        - Token: []
      tags:
        - hod
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: String ID of the year to delete
      responses:
        '200':
          description: 'year delete success'
          schema:
            $ref: '#/definitions/ResultResponse'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal Server Error'
  /months:
    put:
      summary: "create month"
      security:
        - Token: []
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - hod
      parameters:
        - in: body
          name: params
          schema:
            $ref: '#/definitions/Month'
      responses:
        '200':
          description: 'Request success'
          schema:
            $ref: '#/definitions/Month'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
    patch:
      summary: "update month"
      security:
        - Token: []
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - hod
      parameters:
        - in: body
          name: params
          schema:
            $ref: '#/definitions/Month'
      responses:
        '200':
          description: 'Request success'
          schema:
            $ref: '#/definitions/Month'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
  /months/{id}:
    get:
      summary: "get months by year id"
      security:
        - Token: []
      tags:
        - hod
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: String ID of the year
      responses:
        '200':
          description: 'month get success'
          schema:
            type: array
            items:
              $ref: '#/definitions/Month'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal Server Error'
    delete:
      summary: "delete month by id"
      security:
        - Token: []
      tags:
        - hod
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: String ID of the month to delete
      responses:
        '200':
          description: 'month delete success'
          schema:
            $ref: '#/definitions/ResultResponse'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal Server Error'
  /photos:
    put:
      summary: "create photo"
      security:
        - Token: []
      consumes:
        - multipart/form-data
      produces:
        - application/json
      tags:
        - hod
      parameters:
        - in: formData
          name: file
          type: file
          required: true
          description: The file to upload
        - in: formData
          name: month_id
          type: string
          required: true
      responses:
        '200':
          description: 'фото успешно добавлено'
          schema:
            $ref: '#/definitions/HodPhoto'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
  /photos/orders:
    post:
      summary: "updates photos oders"
      security:
        - Token: []
      tags:
        - hod
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: params
          schema:
            $ref: '#/definitions/SwapStruct'
          description: swap item orders
      responses:
        '200':
          description: 'положения успешно обновленны'
          schema:
            $ref: '#/definitions/ResultResponse'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
  /photos/{id}:
    get:
      summary: "get photos by month id"
      security:
        - Token: []
      tags:
        - hod
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: String ID of the month
      responses:
        '200':
          description: 'months photos get success'
          schema:
            type: array
            items:
              $ref: '#/definitions/HodPhoto'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal Server Error'
    delete:
      summary: "delete photo by id"
      security:
        - Token: []
      tags:
        - hod
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: String ID of the month to delete
      responses:
        '200':
          description: 'delete photo success'
          schema:
            $ref: '#/definitions/ResultResponse'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal Server Error'
  /advantages:
    get:
      summary: "get advantages list"
      security:
        - Token: []
      tags:
        - advantages
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 'returns advantages list'
          schema:
            type: array
            items: 
              $ref: '#/definitions/Advantage'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal Server Error'
    put:
      summary: "create advantage"
      security:
        - Token: []
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - advantages
      parameters:
        - in: body
          name: params
          schema:
            $ref: '#/definitions/Advantage'
      responses:
        '200':
          description: 'Request success'
          schema:
            $ref: '#/definitions/Advantage'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
    patch:
      summary: "update advantage"
      security:
        - Token: []
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - advantages
      parameters:
        - in: body
          name: params
          schema:
            $ref: '#/definitions/Advantage'
      responses:
        '200':
          description: 'Request success'
          schema:
            $ref: '#/definitions/Advantage'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
  /advantages/{id}:
    get:
      summary: "get advantage by id"
      security:
        - Token: []
      tags:
        - advantages
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: string ID of the advantage
      responses:
        '200':
          description: 'get advantage by id success'
          schema:
            $ref: '#/definitions/Advantage'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal Server Error'
    delete:
      summary: "delete advantage by id"
      security:
        - Token: []
      tags:
        - advantages
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: String ID of the advantage to delete
      responses:
        '200':
          description: 'delete advantage success'
          schema:
            $ref: '#/definitions/ResultResponse'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal Server Error'
  /advantages/orders:
    post:
      summary: "updates advantages oders"
      security:
        - Token: []
      tags:
        - advantages
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: params
          schema:
            $ref: '#/definitions/SwapStruct'
          description: swap item orders
      responses:
        '200':
          description: 'положения успешно обновленны'
          schema:
            $ref: '#/definitions/ResultResponse'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
  /advantage_photo:
    put:
      summary: "create advantage photo"
      security:
        - Token: []
      consumes:
        - multipart/form-data
      produces:
        - application/json
      tags:
        - advantages
      parameters:
        - in: formData
          name: file
          type: file
          required: true
          description: The file to upload
        - in: formData
          name: advantage_id
          type: string
          required: true
        - in: formData
          name: order
          type: integer
          required: true
      responses:
        '200':
          description: 'Request success'
          schema:
            $ref: '#/definitions/AdvantagePhoto'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'  
  /advantage_photo/{id}:
    get:
      summary: "get photos list by advantage id"
      security:
        - Token: []
      tags:
        - advantages
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: String id of the advantage
      responses:
        '200':
          description: 'returns advantage photos list'
          schema:
            type: array
            items: 
              $ref: '#/definitions/AdvantagePhoto'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal Server Error'
    delete:
      summary: "delete advantage photo by id"
      security:
        - Token: []
      tags:
        - advantages
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: String id of the advantage photo to delete
      responses:
        '200':
          description: 'delete advantage success'
          schema:
            $ref: '#/definitions/ResultResponse'
        '400':
          description: 'Bad request'
        '500':
          description: 'Internal Server Error'
  /advantage_photo/orders:
    post:
      summary: "updates advantage photo oders"
      security:
        - Token: []
      tags:
        - advantages
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: params
          schema:
            $ref: '#/definitions/SwapStruct'
          description: swap item orders
      responses:
        '200':
          description: 'положения успешно обновленны'
          schema:
            $ref: '#/definitions/ResultResponse'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
definitions:
  AuthenticateRequest:
    type: object
    properties:
      login:
        type: string
        example: login
      pass:
        type: string
        example: password
  AuthenticateResponse:
    type: object
    properties:
      token:
        type: string
        example: asdkjkzxcqw1290090
      refresh_token:
        type: string
        example: fewerHHsasqw122231
      error:
        type: string
        example: error
  UserCreateRequest:
    type: object
    properties:
      name:
        type: string
        example: пользователь
      login:
        type: string
        example: login
      pass:
        type: string
        example: password
      role:
        type: string
        example: роль
  ResultResponse:
    type: object
    properties:
      msg:
        type: string
        example: сообщение от бэкэнда
  GetPostersRequest:
    type: object
    properties:
      active:
        type: boolean
        example: false
        description: if active true, returns only active posters, else returns all
      name:
        type: string
        example: Акция
        description: title filter
  GetPostersResponse:
    type: array
    items:
      $ref: '#/definitions/Poster'
  GetYearsResponse:
    type: array
    items:
      $ref: '#/definitions/Year'
  Year:
    type: object
    properties:
      id:
        type: string
      value:
        type: integer
  Month:
    type: object
    properties:
      id:
        type: string
      value:
        type: integer
      name: 
        type: string
      year_id:
        type: string
  HodPhoto:
    type: object
    properties:
      id:
        type: string
      month_id:
        type: string
      image:
        type: string
      order:
        type: integer
  Poster:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      description:
        type: string
      photo:
        type: string
      active:
        type: boolean
      order:
        type: integer
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      modifiedBy:
        type: string
  SwapStruct:
    type: object
    properties:
      first:
        $ref: '#/definitions/SwapItem'
      second:
        $ref: '#/definitions/SwapItem'
  SwapItem:
    type: object
    properties:
      id:
        type: string
      order:
        type: integer
  Advantage:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      description:
        type: string
      order:
        type: integer
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
  AdvantagePhoto:
    type: object
    properties:
      id:
        type: string
      advantage_id:
        type: string
      image:
        type: string
      order:
        type: integer
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      
      
