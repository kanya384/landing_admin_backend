swagger: "2.0"
info:
  version: "1.0.0"
  title: "Landing Backend REST"
host: "backend-service"
schemes:
- "http"
paths:
  /login:
    post:
      summary: "authentication path"
      parameters:
        - in: body
          name: params
          schema:
              $ref: '#/definitions/AuthenticateRequest'
      responses:
        '200':
          description: 'регистрация успешна'
          schema:
            $ref: '#/definitions/AuthenticateResponse'
        '403':
          description: 'Authentication Fail'
          schema:
            $ref: '#/definitions/AuthenticateResponse'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/AuthenticateResponse'
        '500':
          description: 'Internal Server Error'
  /users:
    put:
      summary: "create user"
      parameters:
        - in: body
          name: params
          schema:
            $ref: '#/definitions/UserCreateRequest'
      responses:
        '200':
          description: 'пользователь успешно создан'
          schema:
            $ref: '#/definitions/ResultResponse'
        '400':
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ResultResponse'
        '500':
          description: 'Internal Server Error'
  /ping:
    get:
      summary: "authorization check"
      responses:
        '200':
          description: 'пользователь авторизован'
          schema:
            $ref: '#/definitions/ResultResponse'
        '401':
          description: 'необходимо авторизоваться'
          schema:
            $ref: '#/definitions/ResultResponse'
definitions:
  AuthenticateRequest:
    type: object
    properties:
      login:
        type: string
        example: login
      pass:
        type: string
        example: password
  AuthenticateResponse:
    type: object
    properties:
      token:
        type: string
        example: asdkjkzxcqw1290090
      refresh_token:
        type: string
        example: fewerHHsasqw122231
      error:
        type: string
        example: error
  UserCreateRequest:
    type: object
    properties:
      name:
        type: string
        example: пользователь
      login:
        type: string
        example: login
      pass:
        type: string
        example: password
      role:
        type: string
        example: роль
  ResultResponse:
    type: object
    properties:
      msg:
        type: string
        example: пользователь успешно создан
      