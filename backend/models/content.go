// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Content content
//
// swagger:model Content
type Content struct {

	// advantages
	Advantages []*Advantage `json:"advantages"`

	// docs
	Docs []*Doc `json:"docs"`

	// editables
	Editables []*Editable `json:"editables"`

	// hod
	Hod []*Year `json:"hod"`

	// plans
	Plans []*Plan `json:"plans"`

	// posters
	Posters []*Poster `json:"posters"`

	// video
	Video []*Video `json:"video"`
}

// Validate validates this content
func (m *Content) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvantages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEditables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Content) validateAdvantages(formats strfmt.Registry) error {
	if swag.IsZero(m.Advantages) { // not required
		return nil
	}

	for i := 0; i < len(m.Advantages); i++ {
		if swag.IsZero(m.Advantages[i]) { // not required
			continue
		}

		if m.Advantages[i] != nil {
			if err := m.Advantages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advantages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advantages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Content) validateDocs(formats strfmt.Registry) error {
	if swag.IsZero(m.Docs) { // not required
		return nil
	}

	for i := 0; i < len(m.Docs); i++ {
		if swag.IsZero(m.Docs[i]) { // not required
			continue
		}

		if m.Docs[i] != nil {
			if err := m.Docs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("docs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("docs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Content) validateEditables(formats strfmt.Registry) error {
	if swag.IsZero(m.Editables) { // not required
		return nil
	}

	for i := 0; i < len(m.Editables); i++ {
		if swag.IsZero(m.Editables[i]) { // not required
			continue
		}

		if m.Editables[i] != nil {
			if err := m.Editables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("editables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("editables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Content) validateHod(formats strfmt.Registry) error {
	if swag.IsZero(m.Hod) { // not required
		return nil
	}

	for i := 0; i < len(m.Hod); i++ {
		if swag.IsZero(m.Hod[i]) { // not required
			continue
		}

		if m.Hod[i] != nil {
			if err := m.Hod[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hod" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hod" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Content) validatePlans(formats strfmt.Registry) error {
	if swag.IsZero(m.Plans) { // not required
		return nil
	}

	for i := 0; i < len(m.Plans); i++ {
		if swag.IsZero(m.Plans[i]) { // not required
			continue
		}

		if m.Plans[i] != nil {
			if err := m.Plans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("plans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Content) validatePosters(formats strfmt.Registry) error {
	if swag.IsZero(m.Posters) { // not required
		return nil
	}

	for i := 0; i < len(m.Posters); i++ {
		if swag.IsZero(m.Posters[i]) { // not required
			continue
		}

		if m.Posters[i] != nil {
			if err := m.Posters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("posters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("posters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Content) validateVideo(formats strfmt.Registry) error {
	if swag.IsZero(m.Video) { // not required
		return nil
	}

	for i := 0; i < len(m.Video); i++ {
		if swag.IsZero(m.Video[i]) { // not required
			continue
		}

		if m.Video[i] != nil {
			if err := m.Video[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("video" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("video" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this content based on the context it is used
func (m *Content) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdvantages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDocs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEditables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVideo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Content) contextValidateAdvantages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Advantages); i++ {

		if m.Advantages[i] != nil {
			if err := m.Advantages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advantages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advantages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Content) contextValidateDocs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Docs); i++ {

		if m.Docs[i] != nil {
			if err := m.Docs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("docs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("docs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Content) contextValidateEditables(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Editables); i++ {

		if m.Editables[i] != nil {
			if err := m.Editables[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("editables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("editables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Content) contextValidateHod(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Hod); i++ {

		if m.Hod[i] != nil {
			if err := m.Hod[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hod" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hod" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Content) contextValidatePlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Plans); i++ {

		if m.Plans[i] != nil {
			if err := m.Plans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("plans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Content) contextValidatePosters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Posters); i++ {

		if m.Posters[i] != nil {
			if err := m.Posters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("posters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("posters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Content) contextValidateVideo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Video); i++ {

		if m.Video[i] != nil {
			if err := m.Video[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("video" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("video" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Content) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Content) UnmarshalBinary(b []byte) error {
	var res Content
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
