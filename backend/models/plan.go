// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Plan plan
//
// swagger:model Plan
type Plan struct {

	// active
	Active bool `json:"active,omitempty"`

	// area
	Area float64 `json:"area,omitempty"`

	// commerce
	Commerce bool `json:"commerce,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// discount
	Discount float64 `json:"discount,omitempty"`

	// discount price
	DiscountPrice int64 `json:"discount_price,omitempty"`

	// entrance
	Entrance int64 `json:"entrance,omitempty"`

	// floor
	Floor int64 `json:"floor,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// kitchen area
	KitchenArea float64 `json:"kitchen_area,omitempty"`

	// liter
	Liter string `json:"liter,omitempty"`

	// living area
	LivingArea float64 `json:"living_area,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`

	// number
	Number int64 `json:"number,omitempty"`

	// price
	Price int64 `json:"price,omitempty"`

	// rooms
	Rooms int64 `json:"rooms,omitempty"`

	// square discount price
	SquareDiscountPrice int64 `json:"square_discount_price,omitempty"`

	// square price
	SquarePrice int64 `json:"square_price,omitempty"`

	// status
	Status bool `json:"status,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// window view
	WindowView string `json:"window_view,omitempty"`
}

// Validate validates this plan
func (m *Plan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Plan) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this plan based on context it is used
func (m *Plan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Plan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Plan) UnmarshalBinary(b []byte) error {
	var res Plan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
