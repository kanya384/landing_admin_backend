/* tslint:disable */
/* eslint-disable */
/**
 * Landing Backend REST
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthenticateRequest
 */
export interface AuthenticateRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateRequest
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateRequest
     */
    'pass'?: string;
}
/**
 * 
 * @export
 * @interface AuthenticateResponse
 */
export interface AuthenticateResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateResponse
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateResponse
     */
    'refresh_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateResponse
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface GetPostersRequest
 */
export interface GetPostersRequest {
    /**
     * if active true, returns only active posters, else returns all
     * @type {boolean}
     * @memberof GetPostersRequest
     */
    'active'?: boolean;
    /**
     * title filter
     * @type {string}
     * @memberof GetPostersRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface Poster
 */
export interface Poster {
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'photo'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Poster
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'modifiedBy'?: string;
}
/**
 * 
 * @export
 * @interface ResultResponse
 */
export interface ResultResponse {
    /**
     * 
     * @type {string}
     * @memberof ResultResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface UserCreateRequest
 */
export interface UserCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'pass'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'role'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary authentication path
         * @param {AuthenticateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (params?: AuthenticateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary authorization check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary gets filtered posters list
         * @param {GetPostersRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersGet: async (params?: GetPostersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create user
         * @param {UserCreateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPut: async (params?: UserCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary authentication path
         * @param {AuthenticateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(params?: AuthenticateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary authorization check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary gets filtered posters list
         * @param {GetPostersRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postersGet(params?: GetPostersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Poster>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postersGet(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create user
         * @param {UserCreateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPut(params?: UserCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPut(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary authentication path
         * @param {AuthenticateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(params?: AuthenticateRequest, options?: any): AxiosPromise<AuthenticateResponse> {
            return localVarFp.loginPost(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary authorization check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet(options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.pingGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary gets filtered posters list
         * @param {GetPostersRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersGet(params?: GetPostersRequest, options?: any): AxiosPromise<Array<Poster>> {
            return localVarFp.postersGet(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create user
         * @param {UserCreateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPut(params?: UserCreateRequest, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.usersPut(params, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary authentication path
     * @param {AuthenticateRequest} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginPost(params?: AuthenticateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginPost(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary authorization check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pingGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pingGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary gets filtered posters list
     * @param {GetPostersRequest} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postersGet(params?: GetPostersRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postersGet(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create user
     * @param {UserCreateRequest} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersPut(params?: UserCreateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersPut(params, options).then((request) => request(this.axios, this.basePath));
    }
}


