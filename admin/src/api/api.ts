/* tslint:disable */
/* eslint-disable */
/**
 * Landing Backend REST
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Advantage
 */
export interface Advantage {
    /**
     * 
     * @type {string}
     * @memberof Advantage
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Advantage
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Advantage
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof Advantage
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof Advantage
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Advantage
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface AdvantagePhoto
 */
export interface AdvantagePhoto {
    /**
     * 
     * @type {string}
     * @memberof AdvantagePhoto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdvantagePhoto
     */
    'advantage_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdvantagePhoto
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof AdvantagePhoto
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdvantagePhoto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdvantagePhoto
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface Analytics
 */
export interface Analytics {
    /**
     * 
     * @type {number}
     * @memberof Analytics
     */
    'today_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof Analytics
     */
    'month_count'?: number;
    /**
     * 
     * @type {Array<DayLeadsInfo>}
     * @memberof Analytics
     */
    'chart_info'?: Array<DayLeadsInfo>;
}
/**
 * 
 * @export
 * @interface AuthenticateRequest
 */
export interface AuthenticateRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateRequest
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateRequest
     */
    'pass'?: string;
}
/**
 * 
 * @export
 * @interface AuthenticateResponse
 */
export interface AuthenticateResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateResponse
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateResponse
     */
    'refresh_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateResponse
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface DayLeadsInfo
 */
export interface DayLeadsInfo {
    /**
     * 
     * @type {string}
     * @memberof DayLeadsInfo
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof DayLeadsInfo
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface Doc
 */
export interface Doc {
    /**
     * 
     * @type {string}
     * @memberof Doc
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doc
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doc
     */
    'file'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doc
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doc
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Doc
     */
    'modifiedBy'?: string;
}
/**
 * 
 * @export
 * @interface GetPostersRequest
 */
export interface GetPostersRequest {
    /**
     * if active true, returns only active posters, else returns all
     * @type {boolean}
     * @memberof GetPostersRequest
     */
    'active'?: boolean;
    /**
     * title filter
     * @type {string}
     * @memberof GetPostersRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface HodPhoto
 */
export interface HodPhoto {
    /**
     * 
     * @type {string}
     * @memberof HodPhoto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof HodPhoto
     */
    'month_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof HodPhoto
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof HodPhoto
     */
    'order'?: number;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface Lead
 */
export interface Lead {
    /**
     * 
     * @type {string}
     * @memberof Lead
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lead
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lead
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lead
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lead
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lead
     */
    'roistat'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lead
     */
    'utm_source'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lead
     */
    'utm_medium'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lead
     */
    'utm_term'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lead
     */
    'utm_campaign'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lead
     */
    'utm_content'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Lead
     */
    'sended_to_crm'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Lead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lead
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface Month
 */
export interface Month {
    /**
     * 
     * @type {string}
     * @memberof Month
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Month
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof Month
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Month
     */
    'year_id'?: string;
}
/**
 * 
 * @export
 * @interface Plan
 */
export interface Plan {
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Plan
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'entrance'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Plan
     */
    'commerce'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'floor'?: number;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'number'?: number;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'rooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'area'?: number;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'living_area'?: number;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'kitchen_area'?: number;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'discount_price'?: number;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'square_price'?: number;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'square_discount_price'?: number;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'discount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Plan
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'window_view'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'liter'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'modifiedBy'?: string;
}
/**
 * 
 * @export
 * @interface Poster
 */
export interface Poster {
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'photo'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Poster
     */
    'active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Poster
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'modifiedBy'?: string;
}
/**
 * 
 * @export
 * @interface ResultResponse
 */
export interface ResultResponse {
    /**
     * 
     * @type {string}
     * @memberof ResultResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface SwapItem
 */
export interface SwapItem {
    /**
     * 
     * @type {string}
     * @memberof SwapItem
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof SwapItem
     */
    'order'?: number;
}
/**
 * 
 * @export
 * @interface SwapStruct
 */
export interface SwapStruct {
    /**
     * 
     * @type {SwapItem}
     * @memberof SwapStruct
     */
    'first'?: SwapItem;
    /**
     * 
     * @type {SwapItem}
     * @memberof SwapStruct
     */
    'second'?: SwapItem;
}
/**
 * 
 * @export
 * @interface UserCreateRequest
 */
export interface UserCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'pass'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface Video
 */
export interface Video {
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'preview'?: string;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'modifiedBy'?: string;
}
/**
 * 
 * @export
 * @interface Year
 */
export interface Year {
    /**
     * 
     * @type {string}
     * @memberof Year
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Year
     */
    'value'?: number;
}

/**
 * AdvantagesApi - axios parameter creator
 * @export
 */
export const AdvantagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete advantage photo by id
         * @param {string} id String id of the advantage photo to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagePhotoIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('advantagePhotoIdDelete', 'id', id)
            const localVarPath = `/advantage_photo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get photos list by advantage id
         * @param {string} id String id of the advantage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagePhotoIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('advantagePhotoIdGet', 'id', id)
            const localVarPath = `/advantage_photo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updates advantage photo oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagePhotoOrdersPost: async (params?: SwapStruct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/advantage_photo/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create advantage photo
         * @param {any} file The file to upload
         * @param {string} advantageId 
         * @param {number} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagePhotoPut: async (file: any, advantageId: string, order: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('advantagePhotoPut', 'file', file)
            // verify required parameter 'advantageId' is not null or undefined
            assertParamExists('advantagePhotoPut', 'advantageId', advantageId)
            // verify required parameter 'order' is not null or undefined
            assertParamExists('advantagePhotoPut', 'order', order)
            const localVarPath = `/advantage_photo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (advantageId !== undefined) { 
                localVarFormParams.append('advantage_id', advantageId as any);
            }
    
            if (order !== undefined) { 
                localVarFormParams.append('order', order as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get advantages list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/advantages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete advantage by id
         * @param {string} id String ID of the advantage to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagesIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('advantagesIdDelete', 'id', id)
            const localVarPath = `/advantages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get advantage by id
         * @param {string} id string ID of the advantage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('advantagesIdGet', 'id', id)
            const localVarPath = `/advantages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updates advantages oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagesOrdersPost: async (params?: SwapStruct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/advantages/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update advantage
         * @param {Advantage} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagesPatch: async (params?: Advantage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/advantages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create advantage
         * @param {Advantage} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagesPut: async (params?: Advantage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/advantages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdvantagesApi - functional programming interface
 * @export
 */
export const AdvantagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdvantagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete advantage photo by id
         * @param {string} id String id of the advantage photo to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advantagePhotoIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advantagePhotoIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get photos list by advantage id
         * @param {string} id String id of the advantage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advantagePhotoIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdvantagePhoto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advantagePhotoIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updates advantage photo oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advantagePhotoOrdersPost(params?: SwapStruct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advantagePhotoOrdersPost(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create advantage photo
         * @param {any} file The file to upload
         * @param {string} advantageId 
         * @param {number} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advantagePhotoPut(file: any, advantageId: string, order: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdvantagePhoto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advantagePhotoPut(file, advantageId, order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get advantages list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advantagesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Advantage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advantagesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete advantage by id
         * @param {string} id String ID of the advantage to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advantagesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advantagesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get advantage by id
         * @param {string} id string ID of the advantage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advantagesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Advantage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advantagesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updates advantages oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advantagesOrdersPost(params?: SwapStruct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advantagesOrdersPost(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update advantage
         * @param {Advantage} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advantagesPatch(params?: Advantage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Advantage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advantagesPatch(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create advantage
         * @param {Advantage} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advantagesPut(params?: Advantage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Advantage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advantagesPut(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdvantagesApi - factory interface
 * @export
 */
export const AdvantagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdvantagesApiFp(configuration)
    return {
        /**
         * 
         * @summary delete advantage photo by id
         * @param {string} id String id of the advantage photo to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagePhotoIdDelete(id: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.advantagePhotoIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get photos list by advantage id
         * @param {string} id String id of the advantage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagePhotoIdGet(id: string, options?: any): AxiosPromise<Array<AdvantagePhoto>> {
            return localVarFp.advantagePhotoIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updates advantage photo oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagePhotoOrdersPost(params?: SwapStruct, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.advantagePhotoOrdersPost(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create advantage photo
         * @param {any} file The file to upload
         * @param {string} advantageId 
         * @param {number} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagePhotoPut(file: any, advantageId: string, order: number, options?: any): AxiosPromise<AdvantagePhoto> {
            return localVarFp.advantagePhotoPut(file, advantageId, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get advantages list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagesGet(options?: any): AxiosPromise<Array<Advantage>> {
            return localVarFp.advantagesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete advantage by id
         * @param {string} id String ID of the advantage to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagesIdDelete(id: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.advantagesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get advantage by id
         * @param {string} id string ID of the advantage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagesIdGet(id: string, options?: any): AxiosPromise<Advantage> {
            return localVarFp.advantagesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updates advantages oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagesOrdersPost(params?: SwapStruct, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.advantagesOrdersPost(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update advantage
         * @param {Advantage} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagesPatch(params?: Advantage, options?: any): AxiosPromise<Advantage> {
            return localVarFp.advantagesPatch(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create advantage
         * @param {Advantage} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advantagesPut(params?: Advantage, options?: any): AxiosPromise<Advantage> {
            return localVarFp.advantagesPut(params, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdvantagesApi - object-oriented interface
 * @export
 * @class AdvantagesApi
 * @extends {BaseAPI}
 */
export class AdvantagesApi extends BaseAPI {
    /**
     * 
     * @summary delete advantage photo by id
     * @param {string} id String id of the advantage photo to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvantagesApi
     */
    public advantagePhotoIdDelete(id: string, options?: AxiosRequestConfig) {
        return AdvantagesApiFp(this.configuration).advantagePhotoIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get photos list by advantage id
     * @param {string} id String id of the advantage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvantagesApi
     */
    public advantagePhotoIdGet(id: string, options?: AxiosRequestConfig) {
        return AdvantagesApiFp(this.configuration).advantagePhotoIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updates advantage photo oders
     * @param {SwapStruct} [params] swap item orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvantagesApi
     */
    public advantagePhotoOrdersPost(params?: SwapStruct, options?: AxiosRequestConfig) {
        return AdvantagesApiFp(this.configuration).advantagePhotoOrdersPost(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create advantage photo
     * @param {any} file The file to upload
     * @param {string} advantageId 
     * @param {number} order 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvantagesApi
     */
    public advantagePhotoPut(file: any, advantageId: string, order: number, options?: AxiosRequestConfig) {
        return AdvantagesApiFp(this.configuration).advantagePhotoPut(file, advantageId, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get advantages list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvantagesApi
     */
    public advantagesGet(options?: AxiosRequestConfig) {
        return AdvantagesApiFp(this.configuration).advantagesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete advantage by id
     * @param {string} id String ID of the advantage to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvantagesApi
     */
    public advantagesIdDelete(id: string, options?: AxiosRequestConfig) {
        return AdvantagesApiFp(this.configuration).advantagesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get advantage by id
     * @param {string} id string ID of the advantage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvantagesApi
     */
    public advantagesIdGet(id: string, options?: AxiosRequestConfig) {
        return AdvantagesApiFp(this.configuration).advantagesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updates advantages oders
     * @param {SwapStruct} [params] swap item orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvantagesApi
     */
    public advantagesOrdersPost(params?: SwapStruct, options?: AxiosRequestConfig) {
        return AdvantagesApiFp(this.configuration).advantagesOrdersPost(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update advantage
     * @param {Advantage} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvantagesApi
     */
    public advantagesPatch(params?: Advantage, options?: AxiosRequestConfig) {
        return AdvantagesApiFp(this.configuration).advantagesPatch(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create advantage
     * @param {Advantage} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvantagesApi
     */
    public advantagesPut(params?: Advantage, options?: AxiosRequestConfig) {
        return AdvantagesApiFp(this.configuration).advantagesPut(params, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary authentication path
         * @param {AuthenticateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (params?: AuthenticateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary authorization check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create user
         * @param {UserCreateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPut: async (params?: UserCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary authentication path
         * @param {AuthenticateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(params?: AuthenticateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary authorization check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create user
         * @param {UserCreateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPut(params?: UserCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPut(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary authentication path
         * @param {AuthenticateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(params?: AuthenticateRequest, options?: any): AxiosPromise<AuthenticateResponse> {
            return localVarFp.loginPost(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary authorization check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet(options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.pingGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create user
         * @param {UserCreateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPut(params?: UserCreateRequest, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.usersPut(params, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary authentication path
     * @param {AuthenticateRequest} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginPost(params?: AuthenticateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginPost(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary authorization check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pingGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pingGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create user
     * @param {UserCreateRequest} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersPut(params?: UserCreateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersPut(params, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DocsApi - axios parameter creator
 * @export
 */
export const DocsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get docs list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/doc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete doc by id
         * @param {string} id String id doc to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('docIdDelete', 'id', id)
            const localVarPath = `/doc/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update doc
         * @param {string} id 
         * @param {string} title docs title
         * @param {any} [file] The file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docPatch: async (id: string, title: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('docPatch', 'id', id)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('docPatch', 'title', title)
            const localVarPath = `/doc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create doc file
         * @param {any} file The file to upload
         * @param {string} title docs title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docPut: async (file: any, title: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('docPut', 'file', file)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('docPut', 'title', title)
            const localVarPath = `/doc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocsApi - functional programming interface
 * @export
 */
export const DocsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get docs list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async docGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Doc>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.docGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete doc by id
         * @param {string} id String id doc to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async docIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.docIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update doc
         * @param {string} id 
         * @param {string} title docs title
         * @param {any} [file] The file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async docPatch(id: string, title: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Doc>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.docPatch(id, title, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create doc file
         * @param {any} file The file to upload
         * @param {string} title docs title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async docPut(file: any, title: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Doc>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.docPut(file, title, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocsApi - factory interface
 * @export
 */
export const DocsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocsApiFp(configuration)
    return {
        /**
         * 
         * @summary get docs list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docGet(options?: any): AxiosPromise<Array<Doc>> {
            return localVarFp.docGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete doc by id
         * @param {string} id String id doc to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docIdDelete(id: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.docIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update doc
         * @param {string} id 
         * @param {string} title docs title
         * @param {any} [file] The file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docPatch(id: string, title: string, file?: any, options?: any): AxiosPromise<Doc> {
            return localVarFp.docPatch(id, title, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create doc file
         * @param {any} file The file to upload
         * @param {string} title docs title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docPut(file: any, title: string, options?: any): AxiosPromise<Doc> {
            return localVarFp.docPut(file, title, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocsApi - object-oriented interface
 * @export
 * @class DocsApi
 * @extends {BaseAPI}
 */
export class DocsApi extends BaseAPI {
    /**
     * 
     * @summary get docs list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocsApi
     */
    public docGet(options?: AxiosRequestConfig) {
        return DocsApiFp(this.configuration).docGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete doc by id
     * @param {string} id String id doc to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocsApi
     */
    public docIdDelete(id: string, options?: AxiosRequestConfig) {
        return DocsApiFp(this.configuration).docIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update doc
     * @param {string} id 
     * @param {string} title docs title
     * @param {any} [file] The file to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocsApi
     */
    public docPatch(id: string, title: string, file?: any, options?: AxiosRequestConfig) {
        return DocsApiFp(this.configuration).docPatch(id, title, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create doc file
     * @param {any} file The file to upload
     * @param {string} title docs title
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocsApi
     */
    public docPut(file: any, title: string, options?: AxiosRequestConfig) {
        return DocsApiFp(this.configuration).docPut(file, title, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HodApi - axios parameter creator
 * @export
 */
export const HodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete month by id
         * @param {string} id String ID of the month to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('monthsIdDelete', 'id', id)
            const localVarPath = `/months/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get months by year id
         * @param {string} id String ID of the year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('monthsIdGet', 'id', id)
            const localVarPath = `/months/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update month
         * @param {Month} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsPatch: async (params?: Month, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/months`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create month
         * @param {Month} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsPut: async (params?: Month, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/months`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete photo by id
         * @param {string} id String ID of the month to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('photosIdDelete', 'id', id)
            const localVarPath = `/photos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get photos by month id
         * @param {string} id String ID of the month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('photosIdGet', 'id', id)
            const localVarPath = `/photos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updates photos oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosOrdersPost: async (params?: SwapStruct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/photos/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create photo
         * @param {any} file The file to upload
         * @param {string} monthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosPut: async (file: any, monthId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('photosPut', 'file', file)
            // verify required parameter 'monthId' is not null or undefined
            assertParamExists('photosPut', 'monthId', monthId)
            const localVarPath = `/photos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (monthId !== undefined) { 
                localVarFormParams.append('month_id', monthId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary gets years list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/years`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete year by id
         * @param {string} id String ID of the year to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('yearsIdDelete', 'id', id)
            const localVarPath = `/years/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update year
         * @param {Year} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsPatch: async (params?: Year, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/years`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create year
         * @param {Year} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsPut: async (params?: Year, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/years`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HodApi - functional programming interface
 * @export
 */
export const HodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HodApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete month by id
         * @param {string} id String ID of the month to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async monthsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.monthsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get months by year id
         * @param {string} id String ID of the year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async monthsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Month>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.monthsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update month
         * @param {Month} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async monthsPatch(params?: Month, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Month>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.monthsPatch(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create month
         * @param {Month} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async monthsPut(params?: Month, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Month>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.monthsPut(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete photo by id
         * @param {string} id String ID of the month to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photosIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photosIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get photos by month id
         * @param {string} id String ID of the month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photosIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HodPhoto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photosIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updates photos oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photosOrdersPost(params?: SwapStruct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photosOrdersPost(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create photo
         * @param {any} file The file to upload
         * @param {string} monthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photosPut(file: any, monthId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HodPhoto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photosPut(file, monthId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary gets years list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async yearsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Year>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.yearsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete year by id
         * @param {string} id String ID of the year to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async yearsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.yearsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update year
         * @param {Year} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async yearsPatch(params?: Year, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Year>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.yearsPatch(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create year
         * @param {Year} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async yearsPut(params?: Year, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Year>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.yearsPut(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HodApi - factory interface
 * @export
 */
export const HodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HodApiFp(configuration)
    return {
        /**
         * 
         * @summary delete month by id
         * @param {string} id String ID of the month to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsIdDelete(id: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.monthsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get months by year id
         * @param {string} id String ID of the year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsIdGet(id: string, options?: any): AxiosPromise<Array<Month>> {
            return localVarFp.monthsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update month
         * @param {Month} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsPatch(params?: Month, options?: any): AxiosPromise<Month> {
            return localVarFp.monthsPatch(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create month
         * @param {Month} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsPut(params?: Month, options?: any): AxiosPromise<Month> {
            return localVarFp.monthsPut(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete photo by id
         * @param {string} id String ID of the month to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosIdDelete(id: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.photosIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get photos by month id
         * @param {string} id String ID of the month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosIdGet(id: string, options?: any): AxiosPromise<Array<HodPhoto>> {
            return localVarFp.photosIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updates photos oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosOrdersPost(params?: SwapStruct, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.photosOrdersPost(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create photo
         * @param {any} file The file to upload
         * @param {string} monthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosPut(file: any, monthId: string, options?: any): AxiosPromise<HodPhoto> {
            return localVarFp.photosPut(file, monthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary gets years list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsGet(options?: any): AxiosPromise<Array<Year>> {
            return localVarFp.yearsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete year by id
         * @param {string} id String ID of the year to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsIdDelete(id: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.yearsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update year
         * @param {Year} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsPatch(params?: Year, options?: any): AxiosPromise<Year> {
            return localVarFp.yearsPatch(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create year
         * @param {Year} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsPut(params?: Year, options?: any): AxiosPromise<Year> {
            return localVarFp.yearsPut(params, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HodApi - object-oriented interface
 * @export
 * @class HodApi
 * @extends {BaseAPI}
 */
export class HodApi extends BaseAPI {
    /**
     * 
     * @summary delete month by id
     * @param {string} id String ID of the month to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public monthsIdDelete(id: string, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).monthsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get months by year id
     * @param {string} id String ID of the year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public monthsIdGet(id: string, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).monthsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update month
     * @param {Month} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public monthsPatch(params?: Month, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).monthsPatch(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create month
     * @param {Month} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public monthsPut(params?: Month, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).monthsPut(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete photo by id
     * @param {string} id String ID of the month to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public photosIdDelete(id: string, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).photosIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get photos by month id
     * @param {string} id String ID of the month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public photosIdGet(id: string, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).photosIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updates photos oders
     * @param {SwapStruct} [params] swap item orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public photosOrdersPost(params?: SwapStruct, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).photosOrdersPost(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create photo
     * @param {any} file The file to upload
     * @param {string} monthId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public photosPut(file: any, monthId: string, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).photosPut(file, monthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary gets years list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public yearsGet(options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).yearsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete year by id
     * @param {string} id String ID of the year to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public yearsIdDelete(id: string, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).yearsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update year
     * @param {Year} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public yearsPatch(params?: Year, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).yearsPatch(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create year
     * @param {Year} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public yearsPut(params?: Year, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).yearsPut(params, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LeadsApi - axios parameter creator
 * @export
 */
export const LeadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get leads analytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadAnalyticsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lead/analytics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get leads list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lead`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete lead by id
         * @param {string} id String id lead to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('leadIdDelete', 'id', id)
            const localVarPath = `/lead/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create lead
         * @param {Lead} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadPut: async (params?: Lead, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lead`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeadsApi - functional programming interface
 * @export
 */
export const LeadsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeadsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get leads analytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leadAnalyticsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Analytics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leadAnalyticsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get leads list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leadGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Lead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leadGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete lead by id
         * @param {string} id String id lead to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leadIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leadIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create lead
         * @param {Lead} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leadPut(params?: Lead, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leadPut(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeadsApi - factory interface
 * @export
 */
export const LeadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeadsApiFp(configuration)
    return {
        /**
         * 
         * @summary get leads analytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadAnalyticsGet(options?: any): AxiosPromise<Analytics> {
            return localVarFp.leadAnalyticsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get leads list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadGet(options?: any): AxiosPromise<Array<Lead>> {
            return localVarFp.leadGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete lead by id
         * @param {string} id String id lead to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadIdDelete(id: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.leadIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create lead
         * @param {Lead} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadPut(params?: Lead, options?: any): AxiosPromise<Lead> {
            return localVarFp.leadPut(params, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LeadsApi - object-oriented interface
 * @export
 * @class LeadsApi
 * @extends {BaseAPI}
 */
export class LeadsApi extends BaseAPI {
    /**
     * 
     * @summary get leads analytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public leadAnalyticsGet(options?: AxiosRequestConfig) {
        return LeadsApiFp(this.configuration).leadAnalyticsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get leads list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public leadGet(options?: AxiosRequestConfig) {
        return LeadsApiFp(this.configuration).leadGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete lead by id
     * @param {string} id String id lead to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public leadIdDelete(id: string, options?: AxiosRequestConfig) {
        return LeadsApiFp(this.configuration).leadIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create lead
     * @param {Lead} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public leadPut(params?: Lead, options?: AxiosRequestConfig) {
        return LeadsApiFp(this.configuration).leadPut(params, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlansApi - axios parameter creator
 * @export
 */
export const PlansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get plans list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update plan
         * @param {any} file The file to upload
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansPatch: async (file: any, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('plansPatch', 'file', file)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('plansPatch', 'id', id)
            const localVarPath = `/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update plans activity
         * @param {InlineObject} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansPost: async (params?: InlineObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create/update plans from file
         * @param {any} file The file to upload
         * @param {string} key security key from env
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansPut: async (file: any, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('plansPut', 'file', file)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('plansPut', 'key', key)
            const localVarPath = `/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (key !== undefined) { 
                localVarFormParams.append('key', key as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlansApi - functional programming interface
 * @export
 */
export const PlansApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlansApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get plans list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plansGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Plan>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plansGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update plan
         * @param {any} file The file to upload
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plansPatch(file: any, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plansPatch(file, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update plans activity
         * @param {InlineObject} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plansPost(params?: InlineObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plansPost(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create/update plans from file
         * @param {any} file The file to upload
         * @param {string} key security key from env
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plansPut(file: any, key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plansPut(file, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlansApi - factory interface
 * @export
 */
export const PlansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlansApiFp(configuration)
    return {
        /**
         * 
         * @summary get plans list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansGet(options?: any): AxiosPromise<Array<Plan>> {
            return localVarFp.plansGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update plan
         * @param {any} file The file to upload
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansPatch(file: any, id: string, options?: any): AxiosPromise<Plan> {
            return localVarFp.plansPatch(file, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update plans activity
         * @param {InlineObject} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansPost(params?: InlineObject, options?: any): AxiosPromise<void> {
            return localVarFp.plansPost(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create/update plans from file
         * @param {any} file The file to upload
         * @param {string} key security key from env
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansPut(file: any, key: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.plansPut(file, key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlansApi - object-oriented interface
 * @export
 * @class PlansApi
 * @extends {BaseAPI}
 */
export class PlansApi extends BaseAPI {
    /**
     * 
     * @summary get plans list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApi
     */
    public plansGet(options?: AxiosRequestConfig) {
        return PlansApiFp(this.configuration).plansGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update plan
     * @param {any} file The file to upload
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApi
     */
    public plansPatch(file: any, id: string, options?: AxiosRequestConfig) {
        return PlansApiFp(this.configuration).plansPatch(file, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update plans activity
     * @param {InlineObject} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApi
     */
    public plansPost(params?: InlineObject, options?: AxiosRequestConfig) {
        return PlansApiFp(this.configuration).plansPost(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create/update plans from file
     * @param {any} file The file to upload
     * @param {string} key security key from env
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApi
     */
    public plansPut(file: any, key: string, options?: AxiosRequestConfig) {
        return PlansApiFp(this.configuration).plansPut(file, key, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PostersApi - axios parameter creator
 * @export
 */
export const PostersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary gets filtered posters list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updates posters oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersOrdersPost: async (params?: SwapStruct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posters/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update poster
         * @param {string} id 
         * @param {string} title 
         * @param {string} description 
         * @param {boolean} active 
         * @param {number} order 
         * @param {any} [file] The file to upload
         * @param {string} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPatch: async (id: string, title: string, description: string, active: boolean, order: number, file?: any, photo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postersPatch', 'id', id)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('postersPatch', 'title', title)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('postersPatch', 'description', description)
            // verify required parameter 'active' is not null or undefined
            assertParamExists('postersPatch', 'active', active)
            // verify required parameter 'order' is not null or undefined
            assertParamExists('postersPatch', 'order', order)
            const localVarPath = `/posters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (active !== undefined) { 
                localVarFormParams.append('active', active as any);
            }
    
            if (photo !== undefined) { 
                localVarFormParams.append('photo', photo as any);
            }
    
            if (order !== undefined) { 
                localVarFormParams.append('order', order as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete poster by id
         * @param {string} posterID String ID of the poster to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPosterIDDelete: async (posterID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'posterID' is not null or undefined
            assertParamExists('postersPosterIDDelete', 'posterID', posterID)
            const localVarPath = `/posters/{posterID}`
                .replace(`{${"posterID"}}`, encodeURIComponent(String(posterID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get poster by id
         * @param {string} posterID String ID of the poster to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPosterIDGet: async (posterID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'posterID' is not null or undefined
            assertParamExists('postersPosterIDGet', 'posterID', posterID)
            const localVarPath = `/posters/{posterID}`
                .replace(`{${"posterID"}}`, encodeURIComponent(String(posterID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create poster
         * @param {any} file The file to upload
         * @param {string} title 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPut: async (file: any, title: string, description: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('postersPut', 'file', file)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('postersPut', 'title', title)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('postersPut', 'description', description)
            const localVarPath = `/posters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostersApi - functional programming interface
 * @export
 */
export const PostersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary gets filtered posters list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Poster>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updates posters oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postersOrdersPost(params?: SwapStruct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postersOrdersPost(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update poster
         * @param {string} id 
         * @param {string} title 
         * @param {string} description 
         * @param {boolean} active 
         * @param {number} order 
         * @param {any} [file] The file to upload
         * @param {string} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postersPatch(id: string, title: string, description: string, active: boolean, order: number, file?: any, photo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postersPatch(id, title, description, active, order, file, photo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete poster by id
         * @param {string} posterID String ID of the poster to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postersPosterIDDelete(posterID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postersPosterIDDelete(posterID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get poster by id
         * @param {string} posterID String ID of the poster to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postersPosterIDGet(posterID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Poster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postersPosterIDGet(posterID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create poster
         * @param {any} file The file to upload
         * @param {string} title 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postersPut(file: any, title: string, description: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Poster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postersPut(file, title, description, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostersApi - factory interface
 * @export
 */
export const PostersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostersApiFp(configuration)
    return {
        /**
         * 
         * @summary gets filtered posters list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersGet(options?: any): AxiosPromise<Array<Poster>> {
            return localVarFp.postersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updates posters oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersOrdersPost(params?: SwapStruct, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.postersOrdersPost(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update poster
         * @param {string} id 
         * @param {string} title 
         * @param {string} description 
         * @param {boolean} active 
         * @param {number} order 
         * @param {any} [file] The file to upload
         * @param {string} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPatch(id: string, title: string, description: string, active: boolean, order: number, file?: any, photo?: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.postersPatch(id, title, description, active, order, file, photo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete poster by id
         * @param {string} posterID String ID of the poster to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPosterIDDelete(posterID: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.postersPosterIDDelete(posterID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get poster by id
         * @param {string} posterID String ID of the poster to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPosterIDGet(posterID: string, options?: any): AxiosPromise<Poster> {
            return localVarFp.postersPosterIDGet(posterID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create poster
         * @param {any} file The file to upload
         * @param {string} title 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPut(file: any, title: string, description: string, options?: any): AxiosPromise<Poster> {
            return localVarFp.postersPut(file, title, description, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostersApi - object-oriented interface
 * @export
 * @class PostersApi
 * @extends {BaseAPI}
 */
export class PostersApi extends BaseAPI {
    /**
     * 
     * @summary gets filtered posters list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public postersGet(options?: AxiosRequestConfig) {
        return PostersApiFp(this.configuration).postersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updates posters oders
     * @param {SwapStruct} [params] swap item orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public postersOrdersPost(params?: SwapStruct, options?: AxiosRequestConfig) {
        return PostersApiFp(this.configuration).postersOrdersPost(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update poster
     * @param {string} id 
     * @param {string} title 
     * @param {string} description 
     * @param {boolean} active 
     * @param {number} order 
     * @param {any} [file] The file to upload
     * @param {string} [photo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public postersPatch(id: string, title: string, description: string, active: boolean, order: number, file?: any, photo?: string, options?: AxiosRequestConfig) {
        return PostersApiFp(this.configuration).postersPatch(id, title, description, active, order, file, photo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete poster by id
     * @param {string} posterID String ID of the poster to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public postersPosterIDDelete(posterID: string, options?: AxiosRequestConfig) {
        return PostersApiFp(this.configuration).postersPosterIDDelete(posterID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get poster by id
     * @param {string} posterID String ID of the poster to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public postersPosterIDGet(posterID: string, options?: AxiosRequestConfig) {
        return PostersApiFp(this.configuration).postersPosterIDGet(posterID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create poster
     * @param {any} file The file to upload
     * @param {string} title 
     * @param {string} description 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public postersPut(file: any, title: string, description: string, options?: AxiosRequestConfig) {
        return PostersApiFp(this.configuration).postersPut(file, title, description, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VideoApi - axios parameter creator
 * @export
 */
export const VideoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get video list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete video by id
         * @param {string} id String id video to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('videoIdDelete', 'id', id)
            const localVarPath = `/video/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update video file
         * @param {any} file The file to upload
         * @param {string} id video id
         * @param {string} url video title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPatch: async (file: any, id: string, url: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('videoPatch', 'file', file)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('videoPatch', 'id', id)
            // verify required parameter 'url' is not null or undefined
            assertParamExists('videoPatch', 'url', url)
            const localVarPath = `/video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }
    
            if (url !== undefined) { 
                localVarFormParams.append('url', url as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create video file
         * @param {any} file The file to upload
         * @param {string} url video title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPut: async (file: any, url: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('videoPut', 'file', file)
            // verify required parameter 'url' is not null or undefined
            assertParamExists('videoPut', 'url', url)
            const localVarPath = `/video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (url !== undefined) { 
                localVarFormParams.append('url', url as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideoApi - functional programming interface
 * @export
 */
export const VideoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get video list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete video by id
         * @param {string} id String id video to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update video file
         * @param {any} file The file to upload
         * @param {string} id video id
         * @param {string} url video title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoPatch(file: any, id: string, url: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoPatch(file, id, url, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create video file
         * @param {any} file The file to upload
         * @param {string} url video title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoPut(file: any, url: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoPut(file, url, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideoApi - factory interface
 * @export
 */
export const VideoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideoApiFp(configuration)
    return {
        /**
         * 
         * @summary get video list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoGet(options?: any): AxiosPromise<Array<Video>> {
            return localVarFp.videoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete video by id
         * @param {string} id String id video to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoIdDelete(id: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.videoIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update video file
         * @param {any} file The file to upload
         * @param {string} id video id
         * @param {string} url video title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPatch(file: any, id: string, url: string, options?: any): AxiosPromise<Video> {
            return localVarFp.videoPatch(file, id, url, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create video file
         * @param {any} file The file to upload
         * @param {string} url video title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoPut(file: any, url: string, options?: any): AxiosPromise<Video> {
            return localVarFp.videoPut(file, url, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VideoApi - object-oriented interface
 * @export
 * @class VideoApi
 * @extends {BaseAPI}
 */
export class VideoApi extends BaseAPI {
    /**
     * 
     * @summary get video list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoGet(options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete video by id
     * @param {string} id String id video to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoIdDelete(id: string, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update video file
     * @param {any} file The file to upload
     * @param {string} id video id
     * @param {string} url video title
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoPatch(file: any, id: string, url: string, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoPatch(file, id, url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create video file
     * @param {any} file The file to upload
     * @param {string} url video title
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public videoPut(file: any, url: string, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).videoPut(file, url, options).then((request) => request(this.axios, this.basePath));
    }
}


