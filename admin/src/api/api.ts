/* tslint:disable */
/* eslint-disable */
/**
 * Landing Backend REST
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthenticateRequest
 */
export interface AuthenticateRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateRequest
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateRequest
     */
    'pass'?: string;
}
/**
 * 
 * @export
 * @interface AuthenticateResponse
 */
export interface AuthenticateResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateResponse
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateResponse
     */
    'refresh_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateResponse
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface GetPostersRequest
 */
export interface GetPostersRequest {
    /**
     * if active true, returns only active posters, else returns all
     * @type {boolean}
     * @memberof GetPostersRequest
     */
    'active'?: boolean;
    /**
     * title filter
     * @type {string}
     * @memberof GetPostersRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface HodPhoto
 */
export interface HodPhoto {
    /**
     * 
     * @type {string}
     * @memberof HodPhoto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof HodPhoto
     */
    'month_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof HodPhoto
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof HodPhoto
     */
    'order'?: number;
}
/**
 * 
 * @export
 * @interface Month
 */
export interface Month {
    /**
     * 
     * @type {string}
     * @memberof Month
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Month
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof Month
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Month
     */
    'year_id'?: string;
}
/**
 * 
 * @export
 * @interface Poster
 */
export interface Poster {
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'photo'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Poster
     */
    'active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Poster
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Poster
     */
    'modifiedBy'?: string;
}
/**
 * 
 * @export
 * @interface ResultResponse
 */
export interface ResultResponse {
    /**
     * 
     * @type {string}
     * @memberof ResultResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface SwapItem
 */
export interface SwapItem {
    /**
     * 
     * @type {string}
     * @memberof SwapItem
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof SwapItem
     */
    'order'?: number;
}
/**
 * 
 * @export
 * @interface SwapStruct
 */
export interface SwapStruct {
    /**
     * 
     * @type {SwapItem}
     * @memberof SwapStruct
     */
    'first'?: SwapItem;
    /**
     * 
     * @type {SwapItem}
     * @memberof SwapStruct
     */
    'second'?: SwapItem;
}
/**
 * 
 * @export
 * @interface UserCreateRequest
 */
export interface UserCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'pass'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface Year
 */
export interface Year {
    /**
     * 
     * @type {string}
     * @memberof Year
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Year
     */
    'value'?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary authentication path
         * @param {AuthenticateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (params?: AuthenticateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary authorization check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create user
         * @param {UserCreateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPut: async (params?: UserCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary authentication path
         * @param {AuthenticateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(params?: AuthenticateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary authorization check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create user
         * @param {UserCreateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPut(params?: UserCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPut(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary authentication path
         * @param {AuthenticateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(params?: AuthenticateRequest, options?: any): AxiosPromise<AuthenticateResponse> {
            return localVarFp.loginPost(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary authorization check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet(options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.pingGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create user
         * @param {UserCreateRequest} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPut(params?: UserCreateRequest, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.usersPut(params, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary authentication path
     * @param {AuthenticateRequest} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginPost(params?: AuthenticateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginPost(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary authorization check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pingGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pingGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create user
     * @param {UserCreateRequest} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersPut(params?: UserCreateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersPut(params, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HodApi - axios parameter creator
 * @export
 */
export const HodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete month by id
         * @param {string} id String ID of the month to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('monthsIdDelete', 'id', id)
            const localVarPath = `/months/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get months by year id
         * @param {string} id String ID of the year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('monthsIdGet', 'id', id)
            const localVarPath = `/months/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update month
         * @param {Month} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsPatch: async (params?: Month, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/months`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create month
         * @param {Month} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsPut: async (params?: Month, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/months`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete photo by id
         * @param {string} id String ID of the month to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('photosIdDelete', 'id', id)
            const localVarPath = `/photos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get photos by month id
         * @param {string} id String ID of the month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('photosIdGet', 'id', id)
            const localVarPath = `/photos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updates photos oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosOrdersPost: async (params?: SwapStruct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/photos/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create photo
         * @param {any} file The file to upload
         * @param {string} monthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosPut: async (file: any, monthId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('photosPut', 'file', file)
            // verify required parameter 'monthId' is not null or undefined
            assertParamExists('photosPut', 'monthId', monthId)
            const localVarPath = `/photos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (monthId !== undefined) { 
                localVarFormParams.append('month_id', monthId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary gets years list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/years`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete year by id
         * @param {string} id String ID of the year to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('yearsIdDelete', 'id', id)
            const localVarPath = `/years/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update year
         * @param {Year} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsPatch: async (params?: Year, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/years`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create year
         * @param {Year} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsPut: async (params?: Year, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/years`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HodApi - functional programming interface
 * @export
 */
export const HodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HodApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete month by id
         * @param {string} id String ID of the month to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async monthsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.monthsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get months by year id
         * @param {string} id String ID of the year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async monthsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Month>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.monthsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update month
         * @param {Month} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async monthsPatch(params?: Month, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Month>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.monthsPatch(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create month
         * @param {Month} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async monthsPut(params?: Month, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Month>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.monthsPut(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete photo by id
         * @param {string} id String ID of the month to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photosIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photosIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get photos by month id
         * @param {string} id String ID of the month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photosIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HodPhoto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photosIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updates photos oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photosOrdersPost(params?: SwapStruct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photosOrdersPost(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create photo
         * @param {any} file The file to upload
         * @param {string} monthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photosPut(file: any, monthId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HodPhoto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photosPut(file, monthId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary gets years list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async yearsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Year>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.yearsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete year by id
         * @param {string} id String ID of the year to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async yearsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.yearsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update year
         * @param {Year} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async yearsPatch(params?: Year, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Year>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.yearsPatch(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create year
         * @param {Year} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async yearsPut(params?: Year, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Year>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.yearsPut(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HodApi - factory interface
 * @export
 */
export const HodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HodApiFp(configuration)
    return {
        /**
         * 
         * @summary delete month by id
         * @param {string} id String ID of the month to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsIdDelete(id: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.monthsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get months by year id
         * @param {string} id String ID of the year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsIdGet(id: string, options?: any): AxiosPromise<Array<Month>> {
            return localVarFp.monthsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update month
         * @param {Month} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsPatch(params?: Month, options?: any): AxiosPromise<Month> {
            return localVarFp.monthsPatch(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create month
         * @param {Month} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        monthsPut(params?: Month, options?: any): AxiosPromise<Month> {
            return localVarFp.monthsPut(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete photo by id
         * @param {string} id String ID of the month to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosIdDelete(id: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.photosIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get photos by month id
         * @param {string} id String ID of the month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosIdGet(id: string, options?: any): AxiosPromise<Array<HodPhoto>> {
            return localVarFp.photosIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updates photos oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosOrdersPost(params?: SwapStruct, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.photosOrdersPost(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create photo
         * @param {any} file The file to upload
         * @param {string} monthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosPut(file: any, monthId: string, options?: any): AxiosPromise<HodPhoto> {
            return localVarFp.photosPut(file, monthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary gets years list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsGet(options?: any): AxiosPromise<Array<Year>> {
            return localVarFp.yearsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete year by id
         * @param {string} id String ID of the year to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsIdDelete(id: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.yearsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update year
         * @param {Year} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsPatch(params?: Year, options?: any): AxiosPromise<Year> {
            return localVarFp.yearsPatch(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create year
         * @param {Year} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yearsPut(params?: Year, options?: any): AxiosPromise<Year> {
            return localVarFp.yearsPut(params, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HodApi - object-oriented interface
 * @export
 * @class HodApi
 * @extends {BaseAPI}
 */
export class HodApi extends BaseAPI {
    /**
     * 
     * @summary delete month by id
     * @param {string} id String ID of the month to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public monthsIdDelete(id: string, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).monthsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get months by year id
     * @param {string} id String ID of the year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public monthsIdGet(id: string, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).monthsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update month
     * @param {Month} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public monthsPatch(params?: Month, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).monthsPatch(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create month
     * @param {Month} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public monthsPut(params?: Month, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).monthsPut(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete photo by id
     * @param {string} id String ID of the month to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public photosIdDelete(id: string, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).photosIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get photos by month id
     * @param {string} id String ID of the month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public photosIdGet(id: string, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).photosIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updates photos oders
     * @param {SwapStruct} [params] swap item orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public photosOrdersPost(params?: SwapStruct, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).photosOrdersPost(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create photo
     * @param {any} file The file to upload
     * @param {string} monthId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public photosPut(file: any, monthId: string, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).photosPut(file, monthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary gets years list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public yearsGet(options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).yearsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete year by id
     * @param {string} id String ID of the year to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public yearsIdDelete(id: string, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).yearsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update year
     * @param {Year} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public yearsPatch(params?: Year, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).yearsPatch(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create year
     * @param {Year} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HodApi
     */
    public yearsPut(params?: Year, options?: AxiosRequestConfig) {
        return HodApiFp(this.configuration).yearsPut(params, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PostersApi - axios parameter creator
 * @export
 */
export const PostersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary gets filtered posters list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updates posters oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersOrdersPost: async (params?: SwapStruct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posters/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update poster
         * @param {string} id 
         * @param {string} title 
         * @param {string} description 
         * @param {boolean} active 
         * @param {number} order 
         * @param {any} [file] The file to upload
         * @param {string} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPatch: async (id: string, title: string, description: string, active: boolean, order: number, file?: any, photo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postersPatch', 'id', id)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('postersPatch', 'title', title)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('postersPatch', 'description', description)
            // verify required parameter 'active' is not null or undefined
            assertParamExists('postersPatch', 'active', active)
            // verify required parameter 'order' is not null or undefined
            assertParamExists('postersPatch', 'order', order)
            const localVarPath = `/posters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (active !== undefined) { 
                localVarFormParams.append('active', active as any);
            }
    
            if (photo !== undefined) { 
                localVarFormParams.append('photo', photo as any);
            }
    
            if (order !== undefined) { 
                localVarFormParams.append('order', order as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete poster by id
         * @param {string} posterID String ID of the poster to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPosterIDDelete: async (posterID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'posterID' is not null or undefined
            assertParamExists('postersPosterIDDelete', 'posterID', posterID)
            const localVarPath = `/posters/{posterID}`
                .replace(`{${"posterID"}}`, encodeURIComponent(String(posterID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get poster by id
         * @param {string} posterID String ID of the poster to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPosterIDGet: async (posterID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'posterID' is not null or undefined
            assertParamExists('postersPosterIDGet', 'posterID', posterID)
            const localVarPath = `/posters/{posterID}`
                .replace(`{${"posterID"}}`, encodeURIComponent(String(posterID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create poster
         * @param {any} file The file to upload
         * @param {string} title 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPut: async (file: any, title: string, description: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('postersPut', 'file', file)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('postersPut', 'title', title)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('postersPut', 'description', description)
            const localVarPath = `/posters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostersApi - functional programming interface
 * @export
 */
export const PostersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary gets filtered posters list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Poster>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updates posters oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postersOrdersPost(params?: SwapStruct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postersOrdersPost(params, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update poster
         * @param {string} id 
         * @param {string} title 
         * @param {string} description 
         * @param {boolean} active 
         * @param {number} order 
         * @param {any} [file] The file to upload
         * @param {string} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postersPatch(id: string, title: string, description: string, active: boolean, order: number, file?: any, photo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postersPatch(id, title, description, active, order, file, photo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete poster by id
         * @param {string} posterID String ID of the poster to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postersPosterIDDelete(posterID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postersPosterIDDelete(posterID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get poster by id
         * @param {string} posterID String ID of the poster to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postersPosterIDGet(posterID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Poster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postersPosterIDGet(posterID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create poster
         * @param {any} file The file to upload
         * @param {string} title 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postersPut(file: any, title: string, description: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Poster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postersPut(file, title, description, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostersApi - factory interface
 * @export
 */
export const PostersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostersApiFp(configuration)
    return {
        /**
         * 
         * @summary gets filtered posters list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersGet(options?: any): AxiosPromise<Array<Poster>> {
            return localVarFp.postersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updates posters oders
         * @param {SwapStruct} [params] swap item orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersOrdersPost(params?: SwapStruct, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.postersOrdersPost(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update poster
         * @param {string} id 
         * @param {string} title 
         * @param {string} description 
         * @param {boolean} active 
         * @param {number} order 
         * @param {any} [file] The file to upload
         * @param {string} [photo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPatch(id: string, title: string, description: string, active: boolean, order: number, file?: any, photo?: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.postersPatch(id, title, description, active, order, file, photo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete poster by id
         * @param {string} posterID String ID of the poster to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPosterIDDelete(posterID: string, options?: any): AxiosPromise<ResultResponse> {
            return localVarFp.postersPosterIDDelete(posterID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get poster by id
         * @param {string} posterID String ID of the poster to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPosterIDGet(posterID: string, options?: any): AxiosPromise<Poster> {
            return localVarFp.postersPosterIDGet(posterID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create poster
         * @param {any} file The file to upload
         * @param {string} title 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postersPut(file: any, title: string, description: string, options?: any): AxiosPromise<Poster> {
            return localVarFp.postersPut(file, title, description, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostersApi - object-oriented interface
 * @export
 * @class PostersApi
 * @extends {BaseAPI}
 */
export class PostersApi extends BaseAPI {
    /**
     * 
     * @summary gets filtered posters list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public postersGet(options?: AxiosRequestConfig) {
        return PostersApiFp(this.configuration).postersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updates posters oders
     * @param {SwapStruct} [params] swap item orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public postersOrdersPost(params?: SwapStruct, options?: AxiosRequestConfig) {
        return PostersApiFp(this.configuration).postersOrdersPost(params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update poster
     * @param {string} id 
     * @param {string} title 
     * @param {string} description 
     * @param {boolean} active 
     * @param {number} order 
     * @param {any} [file] The file to upload
     * @param {string} [photo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public postersPatch(id: string, title: string, description: string, active: boolean, order: number, file?: any, photo?: string, options?: AxiosRequestConfig) {
        return PostersApiFp(this.configuration).postersPatch(id, title, description, active, order, file, photo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete poster by id
     * @param {string} posterID String ID of the poster to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public postersPosterIDDelete(posterID: string, options?: AxiosRequestConfig) {
        return PostersApiFp(this.configuration).postersPosterIDDelete(posterID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get poster by id
     * @param {string} posterID String ID of the poster to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public postersPosterIDGet(posterID: string, options?: AxiosRequestConfig) {
        return PostersApiFp(this.configuration).postersPosterIDGet(posterID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create poster
     * @param {any} file The file to upload
     * @param {string} title 
     * @param {string} description 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public postersPut(file: any, title: string, description: string, options?: AxiosRequestConfig) {
        return PostersApiFp(this.configuration).postersPut(file, title, description, options).then((request) => request(this.axios, this.basePath));
    }
}


